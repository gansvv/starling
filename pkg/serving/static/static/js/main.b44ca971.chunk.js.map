{"version":3,"sources":["context/globalContext.js","components/dashboard/SimulationDeviceStatsTableRow.js","components/notification/Notification.js","components/dashboard/SimulationCard.js","components/intro/IntroCard.js","components/intro/Intro.js","components/toolbar/Toolbar.js","utils/utils.js","components/dashboard/Dashboard.js","components/site/Navbar.js","components/site/PageFooter.js","components/site/SiteWrapper.js","pages/HomePage.js","components/nodata/NoDataFoundCard.js","pages/app/AppLandingPage.js","components/listdetails/ListDetails.js","components/help/HelpPopup.js","pages/app/AppCard.js","pages/app/AppPage.js","pages/model/ModelLandingPage.js","components/help/HelpButtonPopup.js","pages/model/ModelCard.js","pages/model/ImportCard.js","pages/model/ModelPage.js","pages/sim/SimLandingPage.js","pages/sim/SimCard.js","pages/sim/ProvisionCard.js","pages/sim/SimPage.js","pages/settings/SettingsPage.js","pages/metrics/MetricsPage.js","pages/error/Error404Page.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalContext","React","createContext","initialized","apps","models","simulations","config","metricsStatus","initializeData","getApplication","appId","listApplications","addApplication","payload","updateApplication","deleteApplication","getModel","modelId","listModels","addModel","updateModel","deleteModel","importModels","getSimulation","simId","listSimulations","addSimulation","updateSimulation","deleteSimulation","startSimulation","stopSimulation","exportSimulation","provisionSimulationDevices","getConfig","updateConfig","refreshMetricsStatus","GlobalContextProvider","props","useState","setInitialized","setApps","setModels","setSimulations","setConfig","setMetricsStatus","BASE_URL","useEffect","a","axios","get","remoteApps","remoteModels","remoteSimulations","remoteConfig","remoteMetricsStatus","data","initData","res","post","put","delete","downloadUrl","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","Provider","value","find","x","id","children","formatNumber","num","toString","replace","SimulationDeviceStatsTableRow","globalContext","useContext","statusBadge","simulatedCount","connectedCount","msg","className","title","status","model","modelName","name","Row","Col","to","provisionedCount","addNotification","type","message","store","insert","container","animationIn","animationOut","dismiss","duration","onScreen","pauseOnHover","waitForAnimation","showIcon","touch","slidingEnter","timingFunction","delay","slidingExit","SimulationCard","history","useHistory","sim","totalProvisionedDevices","devices","reduce","currentNumber","device","totalSimulatedDevices","totalConnectedDevices","percentConnected","Math","floor","progressColor","statusColor","canStart","canStop","simStatusName","simStatusBadge","prefix","textStatusColor","deviceRows","map","dt","Date","parse","lastUpdatedTime","lastUpdateStr","moment","format","startHandler","Notification","stopHandler","exportHandler","deleteHandler","simBusy","app","targetId","targetName","Header","Title","Options","color","size","icon","onClick","outline","push","disabled","Body","cards","responsive","ColHeader","colSpan","telemetryInterval","telemetryBatchSize","telemetryFormat","reportedPropertyInterval","waveGroupCount","waveGroupInterval","Bar","width","muted","striped","IntroCard","statusElement","statusIsComplete","src","imgSrc","alt","imgAlt","introNumber","description","actionName","actionTooltip","actionUrl","actionIcon","Intro","stepStatus","stepCompleted","length","remainingSteps","obj","deck","sm","xl","Toolbar","countMessage","getErrorMessage","ex","defaultMessage","response","formatCount","collection","Dashboard","backendError","setBackendError","timer","setInterval","Utils","refreshDashboard","clearInterval","err","sims","Content","simCount","navBarItems","LinkComponent","withRouter","NavLink","useExact","Navbar","collapse","setcollapse","navbarClasses","Logo","Item","target","RootComponent","tabbed","itemsObjects","PageFooter","auto","rel","lgAuto","SiteWrapper","Main","HomePage","NoDataFoundCard","noDataImage","actions","action","description2","AppLandingPage","appCount","redir","ListDetails","md","listTitle","Group","list","detailsForm","HelpPopup","content","interactive","interactiveBorder","placement","theme","data-bs-toggle","data-bs-placement","data-bs-html","data-bs-original-title","label","AppCard","setApp","errors","setErrors","fromIntro","URLSearchParams","useLocation","search","has","changeHandler","event","updatedApp","onSubmit","preventDefault","newErrors","hasErrors","trim","appUrl","appToken","provisioningUrl","idScope","masterKey","mode","addedApp","importHandler","isRequired","gutters","Input","required","onChange","invalid","feedback","InputGroup","InputGroupPrepend","InputGroupText","Checkbox","checked","AppPage","params","useParams","queryParams","pageMode","remoteApp","appsList","element","GroupItem","Link","active","appCard","detailsTitle","ModelLandingPage","modelCount","HelpButtonPopup","visible","setVisible","hide","onClickOutside","ModelCard","setModel","capabilityModel","JSON","stringify","updatedModel","addedModel","Textarea","rows","ImportCard","setAppId","Array","from","method","FieldSet","Select","ModelPage","isImportMode","remoteModel","modelsList","modelCard","importCard","showImport","SimLandingPage","SimCard","setSim","remoteSim","updatedSim","changeNumberHandler","match","val","disconnectBehavior","i","fieldName","addedSim","index","pattern","deviceChangeHandler","ProvisionCard","SimPage","isProvisionMode","simsList","simCard","provisionCard","SettingsPage","simWarning","setSimWarning","appWarning","setAppWarning","saved","setSaved","localConfig","http","logger","simulation","geopointData","str","changeSimCheckHandler","updatedConfig","changeLogHandler","updatedLog","changeSimulationNumberHandler","changeHttpNumberHandler","updatedHttp","connectionTimeout","telemetryTimeout","twinUpdateTimeout","commandTimeout","registrationAttemptTimeout","maxConcurrentConnections","maxConcurrentTwinUpdates","maxConcurrentRegistrations","maxConcurrentDeletes","maxRegistrationAttempts","adminPort","metricsPort","logsDir","path","foundError","ex2","enableTelemetry","enableReportedProps","enableTwinUpdateAcks","enableCommandAcks","prometheusPort","grafanaPort","updatedData","logLevel","MetricsPage","grafanaStatus","prometheusStatus","setStatus","stats","starlingStatus","prometheusServer","grafanaServer","prometheusLink","grafanaLink","metricsUrl","starlingMetricsLink","url","CustomError404Page","App","StrictMode","exact","component","Error404Page","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b44ca971.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst GlobalContext = React.createContext({\r\n    initialized: false,\r\n    apps: [],\r\n    models: [],\r\n    simulations: [],\r\n    config: {},\r\n    metricsStatus: {},\r\n    initializeData: () => { },\r\n    getApplication: (appId) => { },\r\n    listApplications: () => { },\r\n    addApplication: (payload) => { },\r\n    updateApplication: (payload) => { },\r\n    deleteApplication: (appId) => { },\r\n    getModel: (modelId) => { },\r\n    listModels: () => { },\r\n    addModel: (payload) => { },\r\n    updateModel: (payload) => { },\r\n    deleteModel: (modelId) => { },\r\n    importModels: (appId) => { },\r\n    getSimulation: (simId) => { },\r\n    listSimulations: () => { },\r\n    addSimulation: (payload) => { },\r\n    updateSimulation: (payload) => { },\r\n    deleteSimulation: (simId) => { },\r\n    startSimulation: (simId) => { },\r\n    stopSimulation: (simId) => { },\r\n    exportSimulation: (simId) => { },\r\n    provisionSimulationDevices: (simId, payload) => { },\r\n    getConfig: () => { },\r\n    updateConfig: (payload) => { },\r\n    refreshMetricsStatus: () => { },\r\n});\r\n\r\nexport const GlobalContextProvider = (props) => {\r\n    const [initialized, setInitialized] = useState(false);\r\n    const [apps, setApps] = useState([]);\r\n    const [models, setModels] = useState([]);\r\n    const [simulations, setSimulations] = useState([]);\r\n    const [config, setConfig] = useState();\r\n    const [metricsStatus, setMetricsStatus] = useState();\r\n    const BASE_URL = (process.env.NODE_ENV !== \"production\") ? \"http://localhost:6001/webapi\" : \"/webapi\";\r\n\r\n    const initializeData = () => {\r\n    }\r\n\r\n    useEffect(() => {\r\n        const initData = async () => {\r\n            if (!initialized) {\r\n                const remoteApps = await axios.get(`${BASE_URL}/target`);\r\n                const remoteModels = await axios.get(`${BASE_URL}/model`);\r\n                const remoteSimulations = await axios.get(`${BASE_URL}/simulation`);\r\n                const remoteConfig = await axios.get(`${BASE_URL}/config`);\r\n                const remoteMetricsStatus = await axios.get(`${BASE_URL}/config/metricsStatus`);\r\n                setApps(remoteApps.data);\r\n                setModels(remoteModels.data);\r\n                setSimulations(remoteSimulations.data);\r\n                setConfig(remoteConfig.data);\r\n                setMetricsStatus(remoteMetricsStatus.data);\r\n                setInitialized(true);\r\n            }\r\n        }\r\n        initData();\r\n    }, [initialized, BASE_URL])\r\n\r\n\r\n\r\n    const getApplication = (appId) => {\r\n        return apps.find((x) => x.id === appId);\r\n    }\r\n\r\n    const listApplications = async () => {\r\n        const res = await axios.get(`${BASE_URL}/target`);\r\n        setApps(res.data);\r\n        return res.data;\r\n    }\r\n\r\n    const addApplication = async (payload) => {\r\n        const res = await axios.post(`${BASE_URL}/target`, payload);\r\n        await listApplications();\r\n        await listModels();\r\n        return res.data;\r\n    }\r\n\r\n    const updateApplication = async (payload) => {\r\n        await axios.put(`${BASE_URL}/target`, payload);\r\n        await listApplications();\r\n    }\r\n\r\n    const deleteApplication = async (appId) => {\r\n        await axios.delete(`${BASE_URL}/target/${appId}`);\r\n        await listApplications();\r\n    }\r\n\r\n    const getModel = (modelId) => {\r\n        return models.find((x) => x.id === modelId);\r\n        //const res = await axios.get(`${BASE_URL}/model/${modelId}`);\r\n        //return res.data;\r\n    }\r\n\r\n    const listModels = async () => {\r\n        const res = await axios.get(`${BASE_URL}/model`);\r\n        setModels(res.data);\r\n        return res.data;\r\n    }\r\n\r\n    const addModel = async (payload) => {\r\n        const res = await axios.post(`${BASE_URL}/model`, payload);\r\n        await listModels();\r\n        await listSimulations();\r\n        return res.data;\r\n    }\r\n\r\n    const updateModel = async (payload) => {\r\n        await axios.put(`${BASE_URL}/model`, payload);\r\n        await listModels();\r\n        await listSimulations();\r\n    }\r\n\r\n    const deleteModel = async (modelId) => {\r\n        await axios.delete(`${BASE_URL}/model/${modelId}`);\r\n        await listModels();\r\n        await listSimulations();\r\n    }\r\n\r\n    const importModels = async (appId) => {\r\n        await axios.post(`${BASE_URL}/target/${appId}/import`);\r\n        await listModels();\r\n        await listSimulations();\r\n    }\r\n\r\n    const getSimulation = (simId) => {\r\n        return simulations.find((x) => x.id === simId);\r\n    }\r\n\r\n    const listSimulations = async () => {\r\n        const res = await axios.get(`${BASE_URL}/simulation`);\r\n        setSimulations(res.data);\r\n        return res.data;\r\n    }\r\n\r\n    const addSimulation = async (payload) => {\r\n        const res = await axios.post(`${BASE_URL}/simulation`, payload);\r\n        await listSimulations();\r\n        return res.data;\r\n    }\r\n\r\n    const updateSimulation = async (payload) => {\r\n        await axios.put(`${BASE_URL}/simulation`, payload);\r\n        await listSimulations();\r\n    }\r\n\r\n    const deleteSimulation = async (simId) => {\r\n        await axios.delete(`${BASE_URL}/simulation/${simId}`);\r\n\r\n        await listSimulations();\r\n    }\r\n\r\n    const startSimulation = async (simId) => {\r\n        await axios.post(`${BASE_URL}/simulation/${simId}/start`);\r\n        await listSimulations();\r\n    }\r\n\r\n    const stopSimulation = async (simId) => {\r\n        await axios.post(`${BASE_URL}/simulation/${simId}/stop`);\r\n        await listSimulations();\r\n    }\r\n\r\n    const exportSimulation = async (simId) => {\r\n        const res = await axios.get(`${BASE_URL}/simulation/${simId}/export`);\r\n        const downloadUrl = window.URL.createObjectURL(new Blob([res.data]));\r\n        const link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        link.setAttribute('download', `loadData-${simId}.sh`);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.remove();\r\n    }\r\n\r\n    const provisionSimulationDevices = async (simId, payload) => {\r\n        await axios.post(`${BASE_URL}/simulation/${simId}/provision`, payload);\r\n        await listSimulations();\r\n    }\r\n\r\n    const getConfig = () => {\r\n        return config;\r\n    }\r\n\r\n    const updateConfig = async (payload) => {\r\n        const remoteConfig = await axios.put(`${BASE_URL}/config`, payload);\r\n        setConfig(remoteConfig.data);\r\n    }\r\n\r\n    const refreshMetricsStatus = async () => {\r\n        const res = await axios.get(`${BASE_URL}/config/metricsStatus`);\r\n        setMetricsStatus(res.data);\r\n        return res.data;\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                initialized: initialized,\r\n                apps: apps,\r\n                models: models,\r\n                simulations: simulations,\r\n                config: config,\r\n                metricsStatus: metricsStatus,\r\n                initializeData: initializeData,\r\n                getApplication: getApplication,\r\n                listApplications: listApplications,\r\n                addApplication: addApplication,\r\n                updateApplication: updateApplication,\r\n                deleteApplication: deleteApplication,\r\n                getModel: getModel,\r\n                listModels: listModels,\r\n                addModel: addModel,\r\n                updateModel: updateModel,\r\n                deleteModel: deleteModel,\r\n                importModels: importModels,\r\n                getSimulation: getSimulation,\r\n                listSimulations: listSimulations,\r\n                addSimulation: addSimulation,\r\n                updateSimulation: updateSimulation,\r\n                deleteSimulation: deleteSimulation,\r\n                startSimulation: startSimulation,\r\n                stopSimulation: stopSimulation,\r\n                exportSimulation: exportSimulation,\r\n                provisionSimulationDevices: provisionSimulationDevices,\r\n                getConfig: getConfig,\r\n                updateConfig: updateConfig,\r\n                refreshMetricsStatus: refreshMetricsStatus,\r\n            }}\r\n        >\r\n            {\r\n                initialized ? props.children : \"loading...\"\r\n            }\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n\r\nexport default GlobalContext;\r\n","import { useContext } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    Table\r\n} from \"tabler-react\";\r\nimport GlobalContext from '../../context/globalContext';\r\n\r\nfunction formatNumber(num) {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\nconst SimulationDeviceStatsTableRow = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n\r\n    let statusBadge = \"\";\r\n    if (props.simulatedCount === props.connectedCount) {\r\n        const msg = \"All \" + formatNumber(props.connectedCount) + \" devices are connected\";\r\n        statusBadge = <span className=\"status-icon bg-success\" title={msg} />;\r\n    } else {\r\n        const msg = formatNumber(props.simulatedCount - props.connectedCount) + \" devices are not connected.\";\r\n        statusBadge = <span className=\"status-icon bg-danger\" title={msg} />;\r\n\r\n    }\r\n    if (props.status !== \"running\") {\r\n        statusBadge = <span className=\"status-icon bg-gray\" title=\"No devices are connected.\" />;\r\n    }\r\n    \r\n    const model = globalContext.getModel(props.model);\r\n    const modelName = (model) ? model.name : props.model;\r\n    return (<Table.Row>\r\n        <Table.Col>                \r\n            <Link to={`/model/${props.model}`}> {modelName} </Link>\r\n        </Table.Col>\r\n        <Table.Col>{formatNumber(props.provisionedCount)}</Table.Col>\r\n        <Table.Col>{formatNumber(props.simulatedCount)}</Table.Col>\r\n        <Table.Col>{statusBadge} {formatNumber(props.connectedCount)}</Table.Col>\r\n    </Table.Row>);\r\n};\r\n\r\nexport default SimulationDeviceStatsTableRow;","import { store } from 'react-notifications-component';\r\nimport 'react-notifications-component/dist/theme.css';\r\n\r\nexport function addNotification(type, title, message) {\r\n    store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"top\",\r\n        container: \"top-right\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n            duration: 2500,\r\n            onScreen: false,\r\n            pauseOnHover: true,\r\n            waitForAnimation: false,\r\n            showIcon: true,\r\n            click: true,\r\n            touch: true\r\n        },\r\n        slidingEnter: {\r\n            duration: 300,\r\n            timingFunction: 'linear',\r\n            delay: 0\r\n          },\r\n        \r\n          slidingExit: {\r\n            duration: 300,\r\n            timingFunction: 'linear',\r\n            delay: 0\r\n          },\r\n    });\r\n};\r\n\r\n","import { useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Header,\r\n    Icon,\r\n    Progress,\r\n    Table,\r\n    Text\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport \"./Dashboard.css\";\r\nimport SimulationDeviceStatsTableRow from './SimulationDeviceStatsTableRow';\r\nimport moment from \"moment\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nfunction formatNumber(num) {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\nconst SimulationCard = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const history = useHistory();\r\n    const { sim } = props;\r\n\r\n    const totalProvisionedDevices = sim.devices.reduce((currentNumber, device) => {\r\n        return currentNumber + device.provisionedCount;\r\n    }, 0);\r\n    const totalSimulatedDevices = sim.devices.reduce((currentNumber, device) => {\r\n        return currentNumber + device.simulatedCount;\r\n    }, 0);\r\n    const totalConnectedDevices = sim.devices.reduce((currentNumber, device) => {\r\n        return currentNumber + device.connectedCount;\r\n    }, 0);\r\n    const percentConnected = (totalSimulatedDevices > 0) ? Math.floor(100 * totalConnectedDevices / totalSimulatedDevices) : 0;\r\n    let progressColor = \"gray\";\r\n    if (sim.status === \"running\") {\r\n        if (percentConnected === 100) {\r\n            progressColor = \"green\";\r\n        } else if (percentConnected >= 70 && percentConnected < 100) {\r\n            progressColor = \"orange\";\r\n        } else if (percentConnected < 70) {\r\n            progressColor = \"red\";\r\n        }\r\n    }\r\n\r\n    let statusColor = \"green\";\r\n    let canStart = false;\r\n    let canStop = false;\r\n    let simStatusName = \"\";\r\n    let simStatusBadge = \"\";\r\n    if (sim.status === \"ready\") {\r\n        statusColor = \"secondary\";\r\n        canStart = true;\r\n        simStatusName = \"Ready\";\r\n        const msg = \"No devices are connected as simulation is not running.\";\r\n        simStatusBadge = <div className=\"float-left\">\r\n            <span className=\"text-dark\" title={msg}><Icon prefix=\"fe\" name=\"check\" /></span>\r\n        </div>;\r\n    } else if (sim.status === \"provisioning\") {\r\n        statusColor = \"primary\";\r\n        simStatusName = \"Devices Provisioning\";\r\n        const msg = \"No devices are connected as simulation is not running.\";\r\n        simStatusBadge = <div className=\"float-left\">\r\n            <span className=\"text-dark\" title={msg}><Icon prefix=\"fe\" name=\"check\" /></span>\r\n        </div>;\r\n    } else if (sim.status === \"running\") {\r\n        simStatusName = \"Running\";\r\n        if (totalSimulatedDevices !== totalConnectedDevices) {\r\n            statusColor = \"danger\";\r\n            const msg = formatNumber(totalSimulatedDevices - totalConnectedDevices) + \" devices are not connected.\";\r\n            simStatusBadge = <div className=\"float-left\">\r\n                <span className=\"text-danger\" title={msg}><Icon prefix=\"fe\" name=\"alert-triangle\" /></span>\r\n            </div>;\r\n        } else {\r\n            const msg = \"All \" + formatNumber(totalSimulatedDevices) + \" devices are connected.\";\r\n            simStatusBadge = <div className=\"float-left\">\r\n                <span className=\"text-success\" title={msg}><Icon prefix=\"fe\" name=\"check\" /></span>\r\n            </div>;\r\n        }\r\n        canStop = true;\r\n    } else if (sim.status === \"deleting\") {\r\n        statusColor = \"danger\";\r\n        simStatusName = \"Deleting Simulation\";\r\n        const msg = \"Deleting devices.\";\r\n        simStatusBadge = <div className=\"float-left\">\r\n            <span className=\"text-dark\" title={msg}><Icon prefix=\"fe\" name=\"check\" /></span>\r\n        </div>;\r\n    }\r\n    const textStatusColor = \"text-\" + statusColor;\r\n\r\n    const deviceRows = sim.devices.map((device) => {\r\n        return <SimulationDeviceStatsTableRow\r\n            key={device.modelId}\r\n            status={sim.status}\r\n            model={device.modelId}\r\n            provisionedCount={device.provisionedCount}\r\n            simulatedCount={device.simulatedCount}\r\n            connectedCount={device.connectedCount}\r\n        />;\r\n    });\r\n\r\n    const dt = new Date(Date.parse(sim.lastUpdatedTime));\r\n    const lastUpdateStr = moment(dt).format(\"L LTS\");\r\n\r\n    const startHandler = async () => {\r\n        await globalContext.startSimulation(sim.id);\r\n        Notification.addNotification(\"success\", \"Success\", `Simulation '${sim.name}' started.`);\r\n    };\r\n\r\n    const stopHandler = async () => {\r\n        await globalContext.stopSimulation(sim.id);\r\n        Notification.addNotification(\"success\", \"Success\", `Simulation '${sim.name}' stopped.`);\r\n    };\r\n\r\n    const exportHandler = async () => {\r\n        await globalContext.exportSimulation(sim.id);\r\n    };\r\n\r\n    const deleteHandler = async () => {\r\n        Notification.addNotification(\"info\", \"Started\", `Deleting simulation '${sim.name}'.`);\r\n        await globalContext.deleteSimulation(sim.id);\r\n    };\r\n\r\n    const simBusy = (sim.status !== \"ready\");\r\n\r\n    const app = globalContext.getApplication(sim.targetId);\r\n    const targetName = (app) ? app.name : sim.targetId;\r\n\r\n    return (\r\n        <div className=\"dashboardItem\">\r\n            <Card statusColor={statusColor} className={\"dashboardCard\"}>\r\n                <Card.Header>\r\n                    <Card.Title>{sim.name}</Card.Title>\r\n                    <Card.Options>\r\n                        {canStart && <span title=\"Start this simulation\">\r\n                            <Button color=\"primary\" size=\"sm\" icon=\"play\"\r\n                                className=\"ml-2\" onClick={startHandler}>Start</Button></span>}\r\n                        {canStop && <span title=\"Stop this simulation\">\r\n                            <Button color=\"primary\" size=\"sm\" icon=\"square\"\r\n                                className=\"ml-2\" onClick={stopHandler}>Stop</Button></span>}\r\n                    </Card.Options>\r\n                </Card.Header>\r\n                <Card.Header className=\"simToolBar\">\r\n                    <span title=\"Reconfigure this simulation\">\r\n                        <Button color=\"primary\" size=\"sm\" outline icon=\"edit-2\" onClick={() => history.push(`/sim/${sim.id}`)}></Button></span>\r\n                    <span title=\"Provision devices for this simulation\">\r\n                        <Button color=\"primary\" size=\"sm\" outline icon=\"grid\" disabled={simBusy} className=\"ml-2\" onClick={() => history.push(`/sim/${sim.id}?provision`)}></Button></span>\r\n                    <span title=\"Export this simulation as a shell script\">\r\n                        <Button color=\"primary\" size=\"sm\" outline icon=\"share\" className=\"ml-2\" onClick={exportHandler}></Button></span>\r\n                    <span title=\"Delete this simulation\">\r\n                        <Button color=\"danger\" size=\"sm\" outline icon=\"trash-2\" disabled={simBusy} className=\"ml-2\" onClick={deleteHandler}></Button></span>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <div className=\"simProgressCardContainer\">\r\n                        <div className=\"simProgressCardItem\">\r\n                            <Table\r\n                                cards={true}\r\n                                responsive={true}\r\n                                className=\"simFieldsTable\">\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.ColHeader colSpan={2}>\r\n                                            Configuration\r\n                                    </Table.ColHeader>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>\r\n                                    <Table.Row>\r\n                                        <Table.Col>ID</Table.Col>\r\n                                        <Table.Col>\r\n                                            <Link to={`/sim/${props.sim.id}`} >{props.sim.id}</Link>\r\n                                        </Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Target</Table.Col>\r\n                                        <Table.Col>\r\n                                            <Link to={`/app/${props.sim.targetId}`} >{targetName}</Link>\r\n                                        </Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Provisioned Devices</Table.Col>\r\n                                        <Table.Col>{formatNumber(totalProvisionedDevices)}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Telemetry Interval</Table.Col>\r\n                                        <Table.Col>{formatNumber(sim.telemetryInterval)} {(sim.telemetryInterval > 1) ? \"secs\" : \"sec\"}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Telemetry Batch Size</Table.Col>\r\n                                        <Table.Col>{formatNumber(sim.telemetryBatchSize)}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Telemetry Format</Table.Col>\r\n                                        <Table.Col>{formatNumber(sim.telemetryFormat)}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Reported Prop. Interval</Table.Col>\r\n                                        <Table.Col>{formatNumber(sim.reportedPropertyInterval)} {(sim.reportedPropertyInterval > 1) ? \"secs\" : \"sec\"}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Wave Groups</Table.Col>\r\n                                        <Table.Col>{formatNumber(sim.waveGroupCount)}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col>Wave Group Interval</Table.Col>\r\n                                        <Table.Col>{formatNumber(sim.waveGroupInterval)} {(sim.waveGroupInterval > 1) ? \"secs\" : \"sec\"}</Table.Col>\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                        <Table.Col></Table.Col>\r\n                                        <Table.Col></Table.Col>\r\n                                    </Table.Row>\r\n                                </Table.Body>\r\n                            </Table>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"simProgressCardItem\">\r\n                                <Card>\r\n                                    <Card.Body className=\"text-center\">\r\n                                        <Header size={5}>Status</Header>\r\n                                        <Header size={2} className={textStatusColor}>{simStatusName}</Header>\r\n                                        <div className=\"float-right\">\r\n                                            <Text size=\"sm\" className=\"simProgressTime\">Since {lastUpdateStr}</Text>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"simProgressCardItem\">\r\n                                <Card>\r\n                                    <Card.Body className=\"text-center\">\r\n                                        <Header size={5}>Connected Devices</Header>\r\n                                        <Header size={2} className=\"text-dark\">{formatNumber(totalConnectedDevices)}</Header>\r\n\r\n                                        <Progress size=\"sm\">\r\n                                            <Progress.Bar color={progressColor} width={percentConnected} />\r\n                                        </Progress>\r\n                                        {simStatusBadge}\r\n                                        <div className=\"float-right\">\r\n                                            <Text size=\"sm\" muted>{percentConnected}%</Text>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table\r\n                        cards={true}\r\n                        striped={true}\r\n                        responsive={true}\r\n                        className=\"table-vcenter\"\r\n                    >\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.ColHeader>Model</Table.ColHeader>\r\n                                <Table.ColHeader>Provisioned</Table.ColHeader>\r\n                                <Table.ColHeader>Simulated</Table.ColHeader>\r\n                                <Table.ColHeader>Connected</Table.ColHeader>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {deviceRows}\r\n                        </Table.Body>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default SimulationCard;","import * as React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Card,\r\n    Icon\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport \"./IntroCard.css\";\r\n\r\nconst IntroCard = (props) => {\r\n    let statusElement = <span className=\"text-warning\" title=\"You need to complete this step.\">\r\n        <Icon prefix=\"fe\" name={\"clock\"} /> Todo\r\n    </span>;\r\n    if (props.statusIsComplete === true) {\r\n        statusElement = <span className=\"text-success\" title=\"You have completed this step.\">\r\n            <Icon prefix=\"fe\" name={\"check\"} /> Done\r\n    </span>;\r\n    }\r\n    return (\r\n        <Card>\r\n            <div className=\"introImageContainer\">\r\n                <img className=\"card-img-top\" src={props.imgSrc} alt={props.imgAlt} />\r\n                <div className=\"introNumber\">\r\n                    {props.introNumber}\r\n                </div>\r\n            </div>\r\n            <Card.Body className=\"d-flex flex-column\">\r\n                <h4>\r\n                    {props.title}\r\n                </h4>\r\n                <div className=\"introDescription\">\r\n                    {props.description}\r\n                </div>\r\n                <div className=\"d-flex align-items-center pt-5 mt-auto\">\r\n                    <div>\r\n                        {\r\n                            !props.statusIsComplete\r\n                            && props.actionName !== \"\"\r\n                            && <span title={props.actionTooltip}>\r\n                                <Link\r\n                                    to={props.actionUrl}\r\n                                    className=\"btn btn-sm btn-primary ml-2\"\r\n                                >\r\n                                    <Icon prefix=\"fe\" name={props.actionIcon} />\r\n                                    {props.actionName}\r\n                                </Link>\r\n                            </span>\r\n                        }\r\n                    </div>\r\n                    <div className=\"ml-auto \">\r\n                        <span className=\"icon d-none d-md-inline-block ml-3 introStatus\">\r\n                            {statusElement}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default IntroCard;\r\n","import { useContext, useEffect } from 'react';\r\nimport {\r\n    Card,\r\n    Grid,\r\n    Header,\r\n    Text\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport IntroCard from './IntroCard';\r\n\r\n\r\n\r\nconst Intro = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n\r\n    // Called on mount to ensure reference data is loaded if coming from shortcut\r\n    useEffect(() => {\r\n        if (!globalContext.initialized) {\r\n            globalContext.initializeData();\r\n        }\r\n    }, [globalContext])\r\n\r\n    const stepStatus = [\r\n        {stepCompleted: globalContext.models.length > 0},\r\n        {stepCompleted: globalContext.apps.length > 0},\r\n        {stepCompleted: globalContext.simulations.length > 0},\r\n        {stepCompleted: globalContext.simulations.length > 0},\r\n    ];\r\n    let remainingSteps = stepStatus.reduce((currentNumber, obj) => {\r\n        return currentNumber+(!obj.stepCompleted ? 1 : 0)}, 0);\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <div>\r\n                    <Grid.Row>\r\n                        <Grid.Col>\r\n                            <Header size={3}>Get started with Starling in 4 easy steps</Header>\r\n                        </Grid.Col>\r\n                        <Grid.Col>\r\n                            <div className=\"float-right\">\r\n                                <Text size=\"sm\"><strong>{remainingSteps} steps remaining</strong></Text>\r\n                            </div>\r\n                        </Grid.Col>\r\n                    </Grid.Row>\r\n                </div>\r\n                <p>\r\n                    Starling is a device simulator for IoT Central. Starling can simulate several types of devices\r\n                    sending data at different rates. Several simulations can be executed simultaneously.\r\n                    Complete the steps below to get started.\r\n                </p>\r\n                <Grid.Row cards deck>\r\n                    <Grid.Col sm={6} xl={3}>\r\n                        <IntroCard\r\n                            imgSrc={\"./images/intro1.jpg\"}\r\n                            imgAlt={\"Add an IoT Central app\"}\r\n                            title={\"Add an IoT Central app\"}\r\n                            description={\r\n                                \"Devices are created in an IoT Central application. Here you can configure your application credentials.\"\r\n                            }\r\n                            introNumber={1}\r\n                            actionName={\"Add Application\"}\r\n                            actionIcon={\"plus\"}\r\n                            actionUrl={\"/app/add?new&intro\"}\r\n                            actionTooltip={\"Add an IoT Central application\"}\r\n                            statusIsComplete={stepStatus[1].stepCompleted}\r\n                        />\r\n                    </Grid.Col>\r\n                    <Grid.Col sm={6} xl={3}>\r\n                        <IntroCard\r\n                            imgSrc={\"./images/intro2.jpg\"}\r\n                            imgAlt={\"Add a Device Model\"}\r\n                            title={\"Add a Device Model\"}\r\n                            description={<div>\r\n                                Device model describes a device using <a \r\n                                    href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL</a>\r\n                                . You only need to add device models once, as they can be shared across applications.\r\n                            </div>}\r\n                            introNumber={2}\r\n                            actionName={\"Add Device Model\"}\r\n                            actionIcon={\"plus\"}\r\n                            actionUrl={\"/model/add?new&intro\"}\r\n                            actionTooltip={\"Add a device model\"}\r\n                            statusIsComplete={stepStatus[0].stepCompleted}\r\n                        />\r\n                    </Grid.Col>\r\n                    <Grid.Col sm={6} xl={3}>\r\n                        <IntroCard\r\n                            imgSrc={\"./images/intro3.jpg\"}\r\n                            imgAlt={\"Add a Simulation\"}\r\n                            title={\"Add a Simulation\"}\r\n                            description={\r\n                                \"Add a simulation targeting an IoT Central application. You can simulate several devices per device model, control rates of telemetry etc. per simulation\"\r\n                            }\r\n                            introNumber={3}\r\n                            actionName={\"Add Simulation\"}\r\n                            actionIcon={\"plus\"}\r\n                            actionUrl={\"/sim/add?new&intro\"}\r\n                            actionTooltip={\"Create a new simulation\"}\r\n                            statusIsComplete={stepStatus[2].stepCompleted}\r\n                        />\r\n                    </Grid.Col>\r\n                    <Grid.Col sm={6} xl={3}>\r\n                        <IntroCard\r\n                            imgSrc={\"./images/intro4.jpg\"}\r\n                            imgAlt={\"Start Simulation\"}\r\n                            title={\"Start Simulation\"}\r\n                            description={\r\n                                \"Once a simulation is created, you can start the simulation. Devices will be automatically provisioned when the simulation is started.\"\r\n                            }\r\n                            introNumber={4}\r\n                            actionName={\"\"}\r\n                            actionIcon={\"\"}\r\n                            actionUrl={\"\"}\r\n                            actionTooltip={\"Start Simulation\"}\r\n                            statusIsComplete={stepStatus[3].stepCompleted}\r\n                        />\r\n                    </Grid.Col>\r\n                </Grid.Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Intro;","import {\r\n    Text\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport \"./Toolbar.css\";\r\n\r\nconst Toolbar = (props) => {\r\n\r\n    return (\r\n        <div className=\"tableToolbar\">\r\n            <div className=\"tableToolbarButtons\">\r\n                {props.children}\r\n            </div>\r\n            <div className=\"tableToolbarStatus\">\r\n                <Text size=\"sm\" >{props.countMessage}</Text>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Toolbar;","export function getErrorMessage(ex, defaultMessage) {\r\n    if (ex) {\r\n        if (ex.response && ex.response.data) {\r\n            return ex.response.data;\r\n        } else if (ex.message) {\r\n            return ex.message;\r\n        }\r\n    }\r\n\r\n    return defaultMessage;\r\n}\r\n\r\nexport function formatNumber(num) {\r\n    if (!num) {\r\n        return \"0\";\r\n    }\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\nexport function formatCount(collection, name) {\r\n    if (collection) {\r\n        if (collection.length === 0) {\r\n            return \" no \" + name + \"s found\";\r\n        } else if (collection.length === 1) {\r\n            return \" 1 \" + name + \" found\";\r\n        }\r\n        return \" \" + collection.length + \" \" + name + \"s found\";\r\n    }\r\n    return \" no \" + name + \"s found\";\r\n}","import { useContext, useEffect, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    Icon,\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport SimulationCard from './SimulationCard';\r\nimport Intro from '../intro/Intro';\r\nimport Toolbar from \"../toolbar/Toolbar\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport * as Utils from '../../utils/utils';\r\nimport \"./Dashboard.css\";\r\n\r\nconst Dashboard = () => {\r\n    const globalContext = useContext(GlobalContext);\r\n    const [backendError, setBackendError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let timer = setInterval(() => {\r\n            if (!globalContext.initialized) {\r\n                globalContext.initializeData();\r\n            }\r\n\r\n            const refreshDashboard = async () => {\r\n                try {\r\n                    await globalContext.listSimulations();\r\n                    setBackendError(\"\");\r\n                } catch (err) {\r\n                    let msg = Utils.getErrorMessage(err, \"error listing simulations\")\r\n                    if (msg === \"Network Error\") {\r\n                        msg += \". Make sure that the Starling server is running.\";\r\n                    }\r\n                    setBackendError(msg);\r\n                }\r\n            };\r\n            refreshDashboard();\r\n        }, 5000);\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n\r\n        // ignore global context dependency error\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    });\r\n\r\n    // Called on mount to ensure reference data is loaded if coming from shortcut\r\n    useEffect(() => {\r\n        try {\r\n            if (!globalContext.initialized) {\r\n                globalContext.initializeData();\r\n            }\r\n            if (!globalContext.config) {\r\n                setBackendError(\"Make sure that the Starling server is running.\");\r\n            } else {\r\n                setBackendError(\"\");\r\n            }\r\n        } catch (err) {\r\n            let msg = Utils.getErrorMessage(err, \"error listing simulations\")\r\n            if (msg === \"Network Error\") {\r\n                msg += \". Make sure that the Starling server is running.\";\r\n            }\r\n            setBackendError(msg);\r\n        }\r\n    }, [globalContext]);\r\n\r\n    const sims = globalContext.simulations;\r\n    const cards = sims.map(sim =>\r\n        <SimulationCard\r\n            key={sim.id}\r\n            sim={sim} />\r\n    );\r\n\r\n    if (globalContext.initialized && sims.length === 0) {\r\n        return (\r\n            <Page.Content title=\"Welcome to Starling!\">\r\n                <Intro />\r\n            </Page.Content>\r\n        );\r\n    }\r\n\r\n    const simCount = Utils.formatCount(sims, \"simulation\");\r\n    return (\r\n        <Page.Content title=\"Dashboard\">\r\n            {\r\n                backendError.length > 0 &&\r\n                <div className=\"alert alert-danger\">\r\n                    <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                    {backendError}\r\n                </div>\r\n            }\r\n            {\r\n                backendError.length === 0 &&\r\n                <Toolbar countMessage={simCount}>\r\n                    <span title=\"Create a new simulation\">\r\n                        <Link\r\n                            to=\"/sim/add?new\"\r\n                            className=\"btn btn-sm btn-primary\"\r\n                        >\r\n                            <Icon prefix=\"fe\" name=\"plus\" />\r\n                    New Simulation\r\n                    </Link>\r\n                    </span>\r\n                </Toolbar>\r\n            }\r\n            {\r\n                sims && sims.length > 0 &&\r\n                <div className=\"dashboard\">\r\n                    {cards}\r\n                </div>\r\n            }\r\n        </Page.Content>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React, { useState, Fragment } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    Nav,\r\n    Site,\r\n} from \"tabler-react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst navBarItems = [\r\n    {\r\n        value: \"Home\",\r\n        to: \"/\",\r\n        icon: \"home\",\r\n        LinkComponent: withRouter(NavLink),\r\n        useExact: true,\r\n    },\r\n    {\r\n        value: \"Applications\",\r\n        to: \"/app\",\r\n        LinkComponent: withRouter(NavLink),\r\n        useExact: false,\r\n    },\r\n    {\r\n        value: \"Models\",\r\n        to: \"/model\",\r\n        LinkComponent: withRouter(NavLink),\r\n        useExact: false,\r\n    },\r\n    {\r\n        value: \"Simulations\",\r\n        to: \"/sim\",\r\n        LinkComponent: withRouter(NavLink),\r\n        useExact: false,\r\n    },\r\n    {\r\n        value: \"Metrics\",\r\n        to: \"/metrics\",\r\n        LinkComponent: withRouter(NavLink),\r\n        icon: \"trending-up\",\r\n        useExact: false,\r\n    },\r\n    {\r\n        value: \"Settings\",\r\n        to: \"/settings\",\r\n        LinkComponent: withRouter(NavLink),\r\n        icon: \"settings\",\r\n        useExact: false,\r\n    },\r\n];\r\n\r\n\r\nconst Navbar = (props) => {\r\n    const [collapse, setcollapse] = useState(false);\r\n\r\n    const handleCollapseMobileMenu = () => {\r\n        setcollapse(!collapse);\r\n    };\r\n    const navbarClasses = collapse ? \"header d-lg-flex p-0 collapse\" : \"header d-lg-flex p-0\";\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"header darkHeader\">\r\n                <Container className={\"\"}>\r\n                    <div className=\"d-flex\">\r\n                        <Site.Logo href={\"/\"} alt={\"Starling\"} src={\"/starling-light.png\"} />\r\n                        <div className=\"d-flex order-lg-2 ml-auto\">\r\n                            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\r\n                                <Button\r\n                                    href=\"https://github.com/iot-for-all/starling\"\r\n                                    target=\"_blank\"\r\n                                    size=\"sm\"\r\n                                    RootComponent=\"a\"\r\n                                    color=\"light\"\r\n                                    icon=\"github\"\r\n                                >Source code</Button>\r\n                            </Nav.Item>\r\n                        </div>\r\n                        <Button\r\n                            className=\"header-toggler d-lg-none ml-3 ml-lg-0 hamburgerBtn\"\r\n                            type=\"button\"\r\n                            outline\r\n                            onClick={handleCollapseMobileMenu}\r\n                        >\r\n                            <span className=\"header-toggler-icon hamburger\"></span>\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <div className={navbarClasses}>\r\n                <Container>\r\n                    <Grid.Row className=\"align-items-center\">\r\n                        <Grid.Col className=\"col-lg order-lg-first\">\r\n                            <Nav\r\n                                tabbed\r\n                                className=\"border-0 flex-column flex-lg-row\"\r\n                                collapse={collapse}\r\n                                itemsObjects={navBarItems}\r\n                            />\r\n                        </Grid.Col>\r\n                    </Grid.Row>\r\n                </Container>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import {Fragment} from  \"react\";\r\nimport {\r\n    Container,\r\n    Grid,\r\n    List\r\n} from \"tabler-react\";\r\n\r\nconst PageFooter = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <footer className=\"footer\">\r\n                <Container>\r\n                    <Grid.Row className=\"align-items-center flex-row-reverse\">\r\n                        <Grid.Col auto={true} className=\"ml-auto\">\r\n                            <Grid.Row className=\"align-items-center\">\r\n                                <Grid.Col auto={true}>\r\n                                    <List className=\"list-inline list-inline-dots mb-0\">\r\n                                        <List.Item className=\"list-inline-item\">\r\n                                            <a\r\n                                                href=\"https://github.com/iot-for-all/starling/readme.md\"\r\n                                                target=\"_blank\"\r\n                                                rel=\"noopener noreferrer\"\r\n                                            >Documentation</a>\r\n                                        </List.Item>\r\n                                        <List.Item className=\"list-inline-item\">\r\n                                            <a\r\n                                                href=\"https://github.com/iot-for-all/starling/docs/faq.md\"\r\n                                                target=\"_blank\"\r\n                                                rel=\"noopener noreferrer\"\r\n                                            >FAQ</a>\r\n                                        </List.Item>\r\n                                        <List.Item className=\"list-inline-item\">\r\n                                            <a href=\"https://github.com/iot-for-all/starling/issues\">Issues</a>\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Grid.Col>\r\n                            </Grid.Row>\r\n                        </Grid.Col>\r\n                        <Grid.Col width={12} lgAuto className=\"mt-3 mt-lg-0 text-center\">\r\n                            Open source Azure IoT Central Device Simulator\r\n                    </Grid.Col>\r\n                    </Grid.Row>\r\n                </Container>\r\n            </footer>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default PageFooter;","import {\r\n    Page,\r\n} from \"tabler-react\";\r\n\r\nimport Navbar from './Navbar';\r\nimport PageFooter from './PageFooter';\r\nimport \"./SiteWrapper.css\";\r\n\r\nconst SiteWrapper = (props) => {\r\n    return (\r\n        <Page>\r\n            <Page.Main className=\"pageMain\">\r\n                <Navbar />\r\n                {props.children}\r\n            </Page.Main>\r\n            <PageFooter />\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default SiteWrapper;","import \"tabler-react/dist/Tabler.css\";\r\nimport Dashboard from '../components/dashboard/Dashboard';\r\nimport SiteWrapper from '../components/site/SiteWrapper';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <SiteWrapper>\r\n            <Dashboard />\r\n        </SiteWrapper>\r\n    );\r\n};\r\n\r\nexport default HomePage;","import { Link } from 'react-router-dom';\r\nimport {\r\n    Icon,\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport \"./NoDataFoundCard.css\";\r\n\r\nconst NoDataFoundCard = (props) => {\r\n    const noDataImage = (props.noDataImage) ? props.noDataImage : \"/images/nodata.svg\";\r\n    const actions = props.actions.map((action) => {\r\n        return (<Link\r\n            key={action.actionName}\r\n            to={action.actionUrl}\r\n            className=\"btn btn-sm btn-primary mr-2\"\r\n        >\r\n            <Icon prefix=\"fe\" name={action.actionIcon} />\r\n            {action.actionName}\r\n        </Link>)\r\n    });\r\n    return (\r\n        <div className=\"empty\">\r\n            <div className=\"empty-image\">\r\n                <img src={noDataImage} alt={props.message} />\r\n            </div>\r\n            <h5>{props.message}</h5>\r\n            <p className=\"empty-subtitle \">\r\n                {props.description}\r\n            </p>\r\n            {\r\n                props.description2 &&\r\n                <p className=\"empty-subtitle \">\r\n                    {props.description2}\r\n                </p>\r\n            }\r\n            <div className=\"empty-action\">\r\n                {actions}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoDataFoundCard;","import { useContext } from 'react';\r\nimport {\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport NoDataFoundCard from '../../components/nodata/NoDataFoundCard';\r\n\r\nconst AppLandingPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const appCount = globalContext.apps ? globalContext.apps.length : 0;\r\n    const redir = appCount > 0 ? `/app/${globalContext.apps[0].id}` : \"\";\r\n\r\n    const actions = [\r\n        {\r\n            actionName: \"Add Application\",\r\n            actionUrl: \"/app/add?new\",\r\n            actionIcon: \"plus\"\r\n        }\r\n    ];\r\n    return appCount > 0 ? <Redirect to={redir} /> :\r\n        <SiteWrapper>\r\n            <Page.Content title=\"\">\r\n                <NoDataFoundCard\r\n                    message=\"IoT Central Applications\"\r\n                    description=\"IoT Central Applications will show up here. Simulated devices are created in these IoT Central applications.\"\r\n                    actions={actions}\r\n                    noDataImage=\"/images/emptyApps.svg\"\r\n                />\r\n            </Page.Content>\r\n        </SiteWrapper>\r\n        ;\r\n}\r\n\r\nexport default AppLandingPage;","import {\r\n    Card,\r\n    Container,\r\n    List,\r\n    Grid,\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\n\r\nimport \"./ListDetails.css\";\r\nconst ListDetails = (props) => {\r\n    return (\r\n        <Card className=\"listCard\">\r\n            <Card.Body>\r\n                <div className=\"my-3 my-md-5 listDetails\">\r\n                    <Container>\r\n                        <Grid.Row>\r\n                            <Grid.Col md={3}>\r\n                                <h4 className=\"mb-5\">{props.listTitle}</h4>\r\n                                <div>\r\n                                    <List.Group>\r\n                                        {props.list}\r\n                                    </List.Group>\r\n                                </div>\r\n                            </Grid.Col>\r\n                            <Grid.Col md={9}>\r\n                                {props.detailsForm}\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Container>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ListDetails;","import React from 'react';\r\nimport Tippy from '@tippyjs/react';\r\nimport \"./HelpButtonPopup.css\";\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/themes/light-border.css';\r\n\r\nconst HelpPopup = (props) => {\r\n    return (\r\n        <Tippy content={<div className=\"helpTooltip\">{props.content}</div>} interactive={true} interactiveBorder={20} delay={100}\r\n            placement={props.placement ? props.placement : \"top\"}\r\n            theme=\"light-border\">\r\n            <div>\r\n                <span className=\"form-help\" data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-html=\"true\" data-bs-original-title=\"\" title=\"\">?</span>\r\n                {(props.label) ? props.label : \"\"}\r\n            </div>\r\n        </Tippy>\r\n    );\r\n};\r\n\r\nexport default HelpPopup;","import { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n} from \"tabler-react\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport HelpPopup from \"../../components/help/HelpPopup\";\r\nimport * as Utils from '../../utils/utils';\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst AppCard = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const [app, setApp] = useState(props.data);\r\n    const [errors, setErrors] = useState({});\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const history = useHistory();\r\n    const queryParams = new URLSearchParams(useLocation().search);\r\n    const fromIntro = (queryParams.has(\"intro\"));\r\n\r\n    useEffect(() => {\r\n        //console.log(\"ModelForm useEffect data: \", props.data)\r\n\r\n        setApp(props.data);\r\n        setErrors({});\r\n        setBackendError(\"\");\r\n    }, [props.data]);\r\n\r\n    const changeHandler = (event) => {\r\n        let updatedApp = {\r\n            ...app,\r\n            [event.target.name]: event.target.value\r\n        }\r\n        setApp(updatedApp);\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \", updatedApp: \", updatedApp);\r\n    }\r\n\r\n    const changeCheckHandler = (event) => {\r\n        let updatedApp = {\r\n            ...app,\r\n            [event.target.name]: event.target.checked\r\n        }\r\n        setApp(updatedApp);\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \", updatedApp: \", updatedApp);\r\n    }\r\n    \r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        let newErrors = {};\r\n        let hasErrors = false;\r\n        if (app.name.trim() === \"\") {\r\n            newErrors.name = true;\r\n            hasErrors = true;\r\n        }\r\n        if (app.appUrl.trim() === \"\") {\r\n            newErrors.appUrl = true;\r\n            hasErrors = true;\r\n        }\r\n        if (app.appToken.trim() === \"\") {\r\n            newErrors.appToken = true;\r\n            hasErrors = true;\r\n        }\r\n        if (app.provisioningUrl.trim() === \"\") {\r\n            newErrors.provisioningUrl = true;\r\n            hasErrors = true;\r\n        }\r\n        if (app.idScope.trim() === \"\") {\r\n            newErrors.idScope = true;\r\n            hasErrors = true;\r\n        }\r\n        if (app.masterKey.trim() === \"\") {\r\n            newErrors.masterKey = true;\r\n            hasErrors = true;\r\n        }\r\n\r\n        setErrors(newErrors);\r\n\r\n        if (!hasErrors) {\r\n            //console.log(\"Form submitted mode: \", props.mode, \" app: \", app);\r\n            try {\r\n                const updatedApp = {\r\n                    ...app\r\n                };\r\n                let appId = app.id;\r\n                if (props.mode === \"add\") {\r\n                    const addedApp = await globalContext.addApplication(updatedApp);\r\n                    appId = addedApp.id;\r\n                    Notification.addNotification(\"success\", \"Success\", `Application '${updatedApp.name}' is added.`);\r\n                } else {\r\n                    await globalContext.updateApplication(updatedApp);\r\n                    Notification.addNotification(\"success\", \"Success\", `Application '${updatedApp.name}' is updated.`);\r\n                }\r\n\r\n                if (fromIntro) {\r\n                    history.push(\"/\");\r\n                } else {\r\n                    history.push(`/app/${appId}`);\r\n                }\r\n            } catch (ex) {\r\n                setBackendError(Utils.getErrorMessage(ex, \"error saving application\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    const importHandler = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            Notification.addNotification(\"info\", \"Started\", `Importing devices models from '${app.name}'.`);\r\n            await globalContext.importModels(app.id);\r\n            Notification.addNotification(\"success\", \"Success\", `Devices models are imported from '${app.name}'.`);\r\n        } catch (ex) {\r\n            setBackendError(Utils.getErrorMessage(ex, \"error importing models\"));\r\n        }\r\n    };\r\n\r\n    const deleteHandler = async (event) => {\r\n        event.preventDefault();\r\n        //console.log(\"Delete App\", app.id);\r\n\r\n        try {\r\n            await globalContext.deleteApplication(app.id);\r\n            Notification.addNotification(\"success\", \"Success\", `Application '${app.name}' is deleted.`);\r\n            history.push(\"/app\");\r\n        } catch (ex) {\r\n            setBackendError(Utils.getErrorMessage(ex, \"error deleting application\"));\r\n        }\r\n    };\r\n\r\n    const title = props.mode ? (props.mode === \"add\") ? \"Add new application\" : \"Edit application - \" + props.data.name : \"\";\r\n    //console.log(\"ModelForm - mode: \", props.mode, \" backendError: \", props.backendError, \" data: \", props.data);\r\n\r\n    return <>\r\n        <div>{props.backendError}</div>\r\n        <form onSubmit={onSubmit}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Options>\r\n                        <span title=\"Save this application\">\r\n                            <Button\r\n                                color=\"primary\"\r\n                                size=\"sm\"\r\n                                icon=\"save\"\r\n                                className=\"ml-2\"\r\n                                onClick={onSubmit}\r\n                            >Save</Button>\r\n                        </span>\r\n                        {props.mode === \"add\" &&\r\n                            <span title=\"Cancel all changes\">\r\n                                <Button color=\"primary\" size=\"sm\" className=\"ml-2\"\r\n                                    onClick={() => history.push(\"/app\")} >Cancel</Button>\r\n                            </span>\r\n                        }\r\n                    </Card.Options>\r\n                </Card.Header>\r\n                {props.mode !== \"add\" &&\r\n                    <Card.Header className=\"simToolBar\">\r\n                        <span title=\"Import all device models from this application\">\r\n                            <Button color=\"primary\" size=\"sm\" outline icon=\"download\" onClick={importHandler}>Import Device Models</Button></span>\r\n                        <span title=\"Delete this application\">\r\n                            <Button color=\"danger\" outline size=\"sm\" icon=\"trash-2\" className=\"ml-2\" onClick={deleteHandler}>Delete</Button>\r\n                        </span>\r\n                    </Card.Header>\r\n                }\r\n                <Card.Body>\r\n                    {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                        <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                        {backendError}\r\n                    </div>}\r\n                    <p>\r\n                        Simulated devices are created in an IoT Central application. Create an IoT Central and\r\n                        enter these details so that the devices can be provisioned using the credentials given below.\r\n                        Multiple simulations can be created against an application and executed simultaneously.\r\n                    </p>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Application Name\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.Input\r\n                                    name=\"name\"\r\n                                    value={app.name}\r\n                                    required\r\n                                    onChange={changeHandler}\r\n                                    invalid={errors.name ? true : false}\r\n                                    feedback=\"Application Name is required\"\r\n                                />\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>Descriptive name of the IoT Central application.</>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Application URL\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.InputGroup>\r\n                                    <Form.InputGroupPrepend>\r\n                                        <Form.InputGroupText>\r\n                                            https://\r\n                                </Form.InputGroupText>\r\n                                    </Form.InputGroupPrepend>\r\n                                    <Form.Input\r\n                                        name=\"appUrl\"\r\n                                        value={app.appUrl}\r\n                                        required\r\n                                        onChange={changeHandler}\r\n                                        invalid={errors.appUrl ? true : false}\r\n                                        feedback=\"Application URL is required\"\r\n                                    />\r\n                                </Form.InputGroup>\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>\r\n                                    <p>URL to access IoT Central application.</p>\r\n                                    This is used by the IoT Central API to delete the devices when a simulation is deleted.\r\n                                    </>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Application API Token\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.Input\r\n                                    name=\"appToken\"\r\n                                    value={app.appToken}\r\n                                    required\r\n                                    onChange={changeHandler}\r\n                                    invalid={errors.name ? true : false}\r\n                                    feedback=\"Application API Token is required\"\r\n                                />\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>\r\n                                    <p><strong>API Token</strong> to access the IoT Central application.</p>\r\n                                    <p>You can get this from IoT Central application <strong> Administration</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>API Token</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>Generate Token</strong>.</p>\r\n                                    API Token is used to delete devices from IoT Central. Make sure that this token has delete devices permission.</>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Device Provisioning URL\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.InputGroup>\r\n                                    <Form.InputGroupPrepend>\r\n                                        <Form.InputGroupText>\r\n                                            https://\r\n                                </Form.InputGroupText>\r\n                                    </Form.InputGroupPrepend>\r\n                                    <Form.Input\r\n                                        name=\"provisioningUrl\"\r\n                                        value={app.provisioningUrl}\r\n                                        required\r\n                                        onChange={changeHandler}\r\n                                        invalid={errors.provisioningUrl ? true : false}\r\n                                        feedback=\"Device Provisioning URL is required\"\r\n                                    />\r\n                                </Form.InputGroup>\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>\r\n                                    <p>The endpoint for Device Provisioning Service (DPS).</p>\r\n                                    <p>Typically it is https://<strong>global.azure-devices-provisioning.net</strong>.</p>\r\n                                Rarely this might be different.\r\n                                </>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"ID Scope\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.Input\r\n                                    name=\"idScope\"\r\n                                    value={app.idScope}\r\n                                    required\r\n                                    onChange={changeHandler}\r\n                                    invalid={errors.idScope ? true : false}\r\n                                    feedback=\"ID Scope is required\"\r\n                                />\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>\r\n                                    <p>The <strong>ID Scope</strong> for the IoT Central application.</p>\r\n                                    <p>You can get it from IoT Central application <strong> Administration</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>Device Connection</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>ID Scope</strong>.</p>\r\n                                    This ID Scope is used during provisioning of simulated devices.\r\n                                    </>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Device Connection SAS Key\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.Input\r\n                                    name=\"masterKey\"\r\n                                    value={app.masterKey}\r\n                                    required\r\n                                    onChange={changeHandler}\r\n                                    invalid={errors.masterKey ? true : false}\r\n                                    feedback=\"Device Connection SAS Key is required\"\r\n                                />\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>\r\n                                    <p>The <strong>Device Connection SAS Key</strong> for the IoT Central application.</p>\r\n                                    <p>You can get it from IoT Central application <strong>Administration</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>Device Connection</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>SAS-IoT-Devices</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>Shared access signature (SAS)</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                        <strong>Primary key</strong>.</p>\r\n                                    <p>This Device Connection SAS Key is used during provisioning of simulated devices.</p>\r\n                                    Currently, X509 certificates are not supported in Starling.\r\n                                    </>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    {props.mode === \"add\" &&\r\n                        <Form.Group>\r\n                            <Grid.Row gutters=\"xs\">\r\n                                <Grid.Col>\r\n                                    <Form.Checkbox\r\n                                        name=\"importModels\"\r\n                                        label=\"Automatically import all device models for this application\"\r\n                                        checked={app.importModels}\r\n                                        onChange={changeCheckHandler}\r\n                                    />\r\n                                </Grid.Col>\r\n                                <Grid.Col\r\n                                    auto\r\n                                    className=\"align-self-center\"\r\n                                >\r\n                                    <HelpPopup content={<><p>After adding the application, import all device models in the application.</p>\r\n                                                You can always import them after adding the application too.</>} />\r\n                                </Grid.Col>\r\n                            </Grid.Row>\r\n                        </Form.Group>\r\n                    }\r\n                </Card.Body>\r\n            </Card>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default AppCard;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Icon,\r\n    List,\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Link, useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport Toolbar from '../../components/toolbar/Toolbar';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport ListDetails from '../../components/listdetails/ListDetails';\r\nimport AppCard from './AppCard';\r\nimport * as Utils from \"../../utils/utils\";\r\n\r\nconst AppPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n\r\n    const params = useParams();\r\n    const queryParams = new URLSearchParams(useLocation().search);\r\n    const [app, setApp] = useState();\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const id = params.id;\r\n    const history = useHistory();\r\n    const pageMode = (queryParams.has(\"new\")) ? \"add\" : \"edit\";\r\n\r\n    // Only called if a new mount or id has changed\r\n    useEffect(() => {\r\n        if (pageMode === 'add') {\r\n            setApp({ id: '', name: '', provisioningUrl: 'global.azure-devices-provisioning.net', idScope: '', masterKey: '', appUrl: '', appToken: '', importModels: true });\r\n        } else {\r\n            if (!id) {\r\n                setApp(globalContext.apps[0]);\r\n            } else {\r\n                const remoteApp = globalContext.getApplication(id);\r\n                if (!remoteApp) {\r\n                    // appId passed in url is invalid or does not exist\r\n                    history.replace(\"/app\");\r\n                }\r\n                setApp({ ...remoteApp });\r\n            }\r\n        }\r\n        setBackendError(\"\");\r\n\r\n        // ignore global context dependency error\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [globalContext.apps, id])\r\n\r\n    const appCount = Utils.formatCount(globalContext.apps, \"application\");\r\n    const appsList = app ? globalContext.apps.map((element) => {\r\n        return (\r\n            <List.GroupItem\r\n                className=\"d-flex align-items-center\"\r\n                to={\"/app/\" + element.id}\r\n                RootComponent={Link}\r\n                key={element.id}\r\n                active={element.id === app?.id}\r\n                action\r\n            >\r\n                {element.name}\r\n            </List.GroupItem>\r\n        );\r\n    }) : \"\";\r\n\r\n    const appCard = app ? <AppCard\r\n        data={app}\r\n        mode={pageMode}\r\n        backendError={backendError}\r\n    /> : \"\";\r\n\r\n    return (\r\n        <SiteWrapper>\r\n            <Page.Content title=\"IoT Central Applications\">\r\n                <Toolbar\r\n                    countMessage={appCount}\r\n                >\r\n                    <span title=\"Add an IoT Central Application\">\r\n                        <Link\r\n                            to=\"/app/add?new\"\r\n                            className=\"btn btn-sm btn-primary\"\r\n                        >\r\n                            <Icon prefix=\"fe\" name=\"plus\" />\r\n                            Add New\r\n                        </Link>\r\n                    </span>\r\n                </Toolbar>\r\n                <ListDetails\r\n                    listTitle={\"Applications\"}\r\n                    list={appsList}\r\n                    detailsTitle={\"Edit Application\"}\r\n                    detailsForm={appCard}\r\n                    backendError={backendError}\r\n                />\r\n            </Page.Content>\r\n        </SiteWrapper>\r\n    );\r\n}\r\n\r\nexport default AppPage;","import { useContext } from 'react';\r\nimport {\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport NoDataFoundCard from '../../components/nodata/NoDataFoundCard';\r\n\r\nconst ModelLandingPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const modelCount = globalContext.models ? globalContext.models.length : 0;\r\n    const redir = modelCount > 0 ? `/model/${globalContext.models[0].id}` : \"\";\r\n    //console.log(\"modelCount: \", modelCount);\r\n\r\n    const actions = [\r\n        {\r\n            actionName: \"Add Device Model\",\r\n            actionUrl: \"/model/add?new\",\r\n            actionIcon: \"plus\"\r\n        }];\r\n    if (globalContext.initialized && globalContext.apps.length > 0){\r\n        actions.push({\r\n            actionName: \"Import Device Models\",\r\n            actionUrl: \"/model/add?import\",\r\n            actionIcon: \"download\"\r\n        });\r\n    }\r\n    return modelCount > 0 ? <Redirect to={redir} /> :\r\n        <SiteWrapper>\r\n            <Page.Content title=\"\">\r\n                <NoDataFoundCard\r\n                    message=\"Device models\"\r\n                    description=\"Device models will show up here. Simulated devices can be spun up based on these device models. Add a device model here.\"\r\n                    actions={actions}\r\n                    noDataImage=\"/images/emptyModels.svg\"\r\n                />\r\n            </Page.Content>\r\n        </SiteWrapper>\r\n        ;\r\n}\r\n\r\nexport default ModelLandingPage;","import { React, useState } from 'react';\r\nimport Tippy from '@tippyjs/react';\r\nimport {\r\n    Button,\r\n} from \"tabler-react\"; import \"./HelpPopup.css\";\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/themes/light-border.css';\r\n\r\nconst HelpButtonPopup = (props) => {\r\n    const [visible, setVisible] = useState(false);\r\n    const show = () => setVisible(true);\r\n    const hide = () => setVisible(false);\r\n\r\n    return (\r\n        <Tippy content={<div className=\"helpButtonTooltip\">{props.content}</div>} interactive={true} interactiveBorder={20} delay={100}\r\n            placement={props.placement ? props.placement : \"top\"}\r\n            theme=\"light-border\"\r\n            visible={visible} onClickOutside={hide}\r\n            >\r\n            <div>\r\n                <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    icon=\"info\"\r\n                    outline\r\n                    className=\"ml-2\"\r\n                    onClick={visible ? hide : show}\r\n                >\r\n                    {(props.label) ? props.label : \"\"}\r\n                </Button>\r\n            </div>\r\n        </Tippy>\r\n    );\r\n};\r\n\r\nexport default HelpButtonPopup;","import { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n} from \"tabler-react\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport HelpPopup from \"../../components/help/HelpPopup\";\r\nimport HelpButtonPopup from \"../../components/help/HelpButtonPopup\";\r\nimport * as Utils from '../../utils/utils';\r\nimport \"./ModelCard.css\";\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst ModelCard = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const [model, setModel] = useState(props.data);\r\n    const [errors, setErrors] = useState({});\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const history = useHistory();\r\n    const queryParams = new URLSearchParams(useLocation().search);\r\n    const fromIntro = (queryParams.has(\"intro\"));\r\n\r\n    useEffect(() => {\r\n        //console.log(\"ModelForm useEffect data: \", props.data)\r\n\r\n        props.data.capabilityModel = JSON.stringify(props.data.capabilityModel, null, 2);\r\n        setModel(props.data);\r\n        setErrors({});\r\n        setBackendError(\"\");\r\n    }, [props.data]);\r\n\r\n    const changeHandler = (event) => {\r\n        let updatedModel = {\r\n            ...model,\r\n            [event.target.name]: event.target.value\r\n        }\r\n        setModel(updatedModel);\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \", updatedModel: \", updatedModel);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        let newErrors = {};\r\n        let hasErrors = false;\r\n        if (model.name.trim() === \"\") {\r\n            newErrors.name = true;\r\n            hasErrors = true;\r\n        }\r\n        if (model.capabilityModel.trim() === \"\") {\r\n            newErrors.capabilityModel = true;\r\n            hasErrors = true;\r\n        }\r\n        setErrors(newErrors);\r\n\r\n        if (!hasErrors) {\r\n            //console.log(\"Form submitted mode: \", props.mode, \" model: \", model);\r\n            try {\r\n                const updatedModel = {\r\n                    ...model,\r\n                    capabilityModel: JSON.parse(model.capabilityModel)\r\n                };\r\n                let modelId = model.id;\r\n                if (props.mode === \"add\") {\r\n                    const addedModel = await globalContext.addModel(updatedModel);\r\n                    modelId = addedModel.id;\r\n                    Notification.addNotification(\"success\", \"Success\", `Device model '${updatedModel.name}' is added.`);\r\n                } else {\r\n                    await globalContext.updateModel(updatedModel);\r\n                    Notification.addNotification(\"success\", \"Success\", `Device model '${updatedModel.name}' is updated.`);\r\n                }\r\n\r\n                if (fromIntro) {\r\n                    history.push(\"/\");\r\n                } else {\r\n                    history.push(`/model/${modelId}`);\r\n                }\r\n            } catch (ex) {\r\n                setBackendError(Utils.getErrorMessage(ex, \"error saving model\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteHandler = async (event) => {\r\n        event.preventDefault();\r\n        //console.log(\"Delete Model\", model.id);\r\n\r\n        try {\r\n            await globalContext.deleteModel(model.id);\r\n            Notification.addNotification(\"success\", \"Success\", `Device model '${model.name}' is deleted.`);\r\n            history.push(\"/model\");\r\n        } catch (ex) {\r\n            setBackendError(Utils.getErrorMessage(ex, \"error deleting model\"));\r\n        }\r\n    };\r\n\r\n    const title = props.mode ? (props.mode === \"add\") ? \"Add new device model\" : \"Edit model - \" + props.data.name : \"\";\r\n    //console.log(\"ModelForm - mode: \", props.mode, \" backendError: \", props.backendError, \" data: \", props.data);\r\n\r\n    return <>\r\n        <div>{props.backendError}</div>\r\n        <form onSubmit={onSubmit}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Options>\r\n                        <span title=\"Save this application\">\r\n                            <Button\r\n                                color=\"primary\"\r\n                                size=\"sm\"\r\n                                icon=\"save\"\r\n                                className=\"ml-2\"\r\n                                onClick={onSubmit}\r\n                            >Save</Button>\r\n                        </span>\r\n                        {props.mode === \"add\" &&\r\n                            <span title=\"Cancel all changes\">\r\n                                <Button color=\"primary\" size=\"sm\" className=\"ml-2\"\r\n                                    onClick={() => history.push(\"/model\")} >Cancel</Button>\r\n                            </span>\r\n                        }\r\n                    </Card.Options>\r\n                </Card.Header>\r\n                {\r\n                    props.mode !== \"add\" &&\r\n                    <Card.Header className=\"simToolBar\">\r\n                        <span title=\"Delete this device model\">\r\n                            <Button color=\"danger\" size=\"sm\" outline icon=\"trash-2\" type=\"button\" onClick={deleteHandler}>Delete</Button></span>\r\n                    </Card.Header>\r\n                }\r\n                <Card.Body>\r\n                    {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                        <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                        {backendError}\r\n                    </div>}\r\n                    <p>\r\n                        Device models describe the behavior of a device using <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL</a> JSON Model.\r\n                        Simulated devices can be spun up based on these device models.\r\n                        Same model can be used across multiple applications.\r\n                        Make sure that this model exists in the IoT Central application before starting the simulation.\r\n                    </p>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Model Name\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.Input\r\n                                    name=\"name\"\r\n                                    value={model.name}\r\n                                    required\r\n                                    onChange={changeHandler}\r\n                                    invalid={errors.name ? true : false}\r\n                                    feedback=\"Model Name is required\"\r\n                                />\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>Descriptive name of the model.</>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                    <div className=\"modelLearnMore\">\r\n                        <HelpButtonPopup\r\n                            content={<>\r\n                                <h6>DTDL support in Starling</h6>\r\n                                <ol className=\"helpButton\">\r\n                                    <li><strong>Supported data types:</strong> boolean, date, datetime, double, duration, float, geopoint, integer, long, string, time.</li>\r\n                                    <li><strong>Unsupported data types:</strong> enum, map, object, vector, array, hashmaps, event, state.</li>\r\n                                    <li><strong>Interfaces</strong> are supported. <strong>Components</strong> are not supported.</li>\r\n                                    <li><strong>Direct methods</strong> are acknowledged. They currently do not return any data.</li>\r\n                                    <li><strong>C2D commands</strong> are not <i>completed</i> or return any data as response.</li>\r\n                                    <li><strong>Regular devices</strong> are supported. <strong>Gateways and Edge devices</strong> are not supported.</li>\r\n                                </ol>\r\n                            </>}\r\n                            label={<>DTDL Support</>}\r\n                        />\r\n                    </div>\r\n                    <Form.Group\r\n                        isRequired\r\n                        label=\"Capability Model\"\r\n                    >\r\n                        <Grid.Row gutters=\"xs\">\r\n                            <Grid.Col>\r\n                                <Form.Textarea\r\n                                    name=\"capabilityModel\"\r\n                                    value={model.capabilityModel}\r\n                                    onChange={changeHandler}\r\n                                    className=\"capabilityModel\"\r\n                                    invalid={errors.capabilityModel ? true : false}\r\n                                    feedback=\"Capability Model is required\"\r\n                                    rows={15}\r\n                                />\r\n                            </Grid.Col>\r\n                            <Grid.Col\r\n                                auto\r\n                                className=\"align-self-center\"\r\n                            >\r\n                                <HelpPopup content={<>\r\n                                    <p>Enter a <a\r\n                                        href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL</a> JSON Model.</p>\r\n                                    You can get this from IoT Central application <strong> Device Templates</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                    <strong>Select your model</strong> <Icon prefix=\"fe\" name=\"arrow-right\" /> {\" \"}\r\n                                    <strong>Export</strong>.</>} />\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.Group>\r\n                </Card.Body>\r\n            </Card>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default ModelCard;\r\n","import { useContext, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n} from \"tabler-react\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport * as Utils from '../../utils/utils';\r\nimport HelpPopup from \"../../components/help/HelpPopup\";\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst ImportCard = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const [appId, setAppId] = useState(\"\");\r\n    const [errors, setErrors] = useState({});\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const history = useHistory();\r\n    \r\n    const changeHandler = (event) => {\r\n        setAppId(event.target.value);\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \", updatedSim: \", updatedSim);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        let newErrors = {};\r\n        let hasErrors = false;\r\n        \r\n        if (appId.trim() === \"\") {\r\n            newErrors.appId = true;\r\n            hasErrors = true;\r\n        }\r\n        setErrors(newErrors);\r\n\r\n        if (!hasErrors) {\r\n            //console.log(\"Form submitted mode: \", props.mode, \" sim: \", sim);\r\n            try {\r\n                Notification.addNotification(\"info\", \"Started\", `Importing devices models from '${appId}'.`);\r\n                await globalContext.importModels(appId);\r\n                Notification.addNotification(\"success\", \"Success\", `Devices models are imported from '${appId}'.`);\r\n    \r\n                history.push(\"/model\");\r\n            } catch (ex) {\r\n                setBackendError(Utils.getErrorMessage(ex, \"error importing device models\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    const appsArr = globalContext.apps ? Array.from(globalContext.apps) : [];\r\n    const appsList = appsArr.map((app) => {\r\n        return (\r\n            <option key={app.id} value={app.id}>{app.name}</option>\r\n        );\r\n    });\r\n    return <>\r\n        <div>{props.backendError}</div>\r\n        <form onSubmit={onSubmit} method=\"post\">\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>Import Device Models</Card.Title>\r\n                    <Card.Options>\r\n                        <span title=\"Import Device Models\">\r\n                            <Button color=\"primary\" size=\"sm\" icon=\"download\" className=\"ml-2\" type=\"submit\">Import</Button>\r\n                        </span>\r\n                        <span title=\"Cancel all changes\">\r\n                            <Button color=\"primary\" size=\"sm\" className=\"ml-2\" outline type=\"button\"\r\n                                onClick={() => history.push(\"/model\")} >Cancel</Button>\r\n                        </span>\r\n                    </Card.Options>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                        <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                        {backendError}\r\n                    </div>}\r\n                    <p>\r\n                        Import all published device models from the application below.\r\n                    </p>\r\n                    <Form.FieldSet>\r\n                        <Grid.Row>\r\n                            <Grid.Col colSpan=\"2\">\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Application to import device models\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Select\r\n                                                name=\"appId\"\r\n                                                value={appId}\r\n                                                required\r\n                                                onChange={changeHandler}\r\n                                                invalid={errors.appId ? true : false}\r\n                                                feedback=\"Application is required\"\r\n                                            >\r\n                                                <option value=\"\">\r\n                                                    Select one\r\n                                        </option>\r\n                                                {appsList}\r\n                                            </Form.Select>\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<>The IoT Central application from which the device models are imported.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.FieldSet>\r\n                </Card.Body>\r\n            </Card>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default ImportCard;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Icon,\r\n    List,\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Link, useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport Toolbar from '../../components/toolbar/Toolbar';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport ListDetails from '../../components/listdetails/ListDetails';\r\nimport ModelCard from './ModelCard';\r\nimport ImportCard from \"./ImportCard\";\r\nimport * as Utils from \"../../utils/utils\";\r\n\r\nconst ModelPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const params = useParams();\r\n    const queryParams = new URLSearchParams(useLocation().search);\r\n    const [model, setModel] = useState();\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const id = params.id;\r\n    const history = useHistory();\r\n    const pageMode = (queryParams.has(\"new\") || queryParams.has(\"import\")) ? \"add\" : \"edit\";\r\n    const isImportMode = (queryParams.has(\"import\"));\r\n\r\n    // Only called if a new mount or id has changed\r\n    useEffect(() => {\r\n        //console.log(\"ModelPage - useeffect, id: \", id);\r\n        if (pageMode === 'add') {\r\n            setModel({ id: '', name: '', capabilityModel: [] });\r\n        } else {\r\n            if (!id) {\r\n                setModel(globalContext.models[0]);\r\n            } else {\r\n                const remoteModel = globalContext.getModel(id);\r\n                if (!remoteModel) {\r\n                    // modelId passed in url is invalid or does not exist\r\n                    history.replace(\"/model\");\r\n                }\r\n                setModel({ ...remoteModel });\r\n            }\r\n        }\r\n        setBackendError(\"\");\r\n\r\n        // ignore global context dependency error\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [globalContext.models, id])\r\n\r\n    const modelCount = Utils.formatCount(globalContext.models, \"device model\");\r\n    //console.log(\"ModelPage - id: \", id, \", pageMode: \", pageMode, \" backendError: \", backendError, \" model:\", model);\r\n\r\n    const modelsList = model ? globalContext.models.map((element) => {\r\n        return (\r\n            <List.GroupItem\r\n                className=\"d-flex align-items-center\"\r\n                to={\"/model/\" + element.id}\r\n                RootComponent={Link}\r\n                key={element.id}\r\n                active={element.id === model?.id}\r\n                action\r\n            >\r\n                {element.name}\r\n            </List.GroupItem>\r\n        );\r\n    }) : \"\";\r\n\r\n    const modelCard = model ? <ModelCard\r\n        data={model}\r\n        mode={pageMode}\r\n        backendError={backendError}\r\n    /> : \"\";\r\n\r\n    const importCard = <ImportCard\r\n        backendError={backendError}\r\n    />;\r\n\r\n    let showImport = (globalContext.initialized && globalContext.apps.length > 0 && !isImportMode) ? true : false;\r\n\r\n    return (\r\n        <SiteWrapper>\r\n            <Page.Content title=\"Device Models\">\r\n                <Toolbar\r\n                    countMessage={modelCount}\r\n                >\r\n                    {\r\n                        showImport &&\r\n                        <span title=\"Add a Device Model\" className=\"mr-2\">\r\n                            <Link\r\n                                to=\"/model/add?import\"\r\n                                className=\"btn btn-sm btn-primary\"\r\n                            >\r\n                                <Icon prefix=\"fe\" name=\"download\" />\r\n                        Import\r\n                    </Link>\r\n                        </span>\r\n                    }\r\n                    <span title=\"Add a Device Model\">\r\n                        <Link\r\n                            to=\"/model/add?new\"\r\n                            className=\"btn btn-sm btn-primary\"\r\n                        >\r\n                            <Icon prefix=\"fe\" name=\"plus\" />\r\n                            Add New\r\n                        </Link>\r\n                    </span>\r\n                </Toolbar>\r\n                <ListDetails\r\n                    listTitle={\"Models\"}\r\n                    list={modelsList}\r\n                    detailsTitle={\"Edit Device Model\"}\r\n                    detailsForm={isImportMode ? importCard : modelCard}\r\n                    backendError={backendError}\r\n                />\r\n            </Page.Content>\r\n        </SiteWrapper>\r\n    );\r\n}\r\n\r\nexport default ModelPage;","import { useContext } from 'react';\r\nimport {\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport NoDataFoundCard from '../../components/nodata/NoDataFoundCard';\r\n\r\nconst SimLandingPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const simCount = globalContext.simulations ? globalContext.simulations.length : 0;\r\n    const redir = simCount > 0 ? `/sim/${globalContext.simulations[0].id}` : \"\";\r\n\r\n    let actionName = \"Add Simulation\";\r\n    let actionUrl = \"/sim/add?new\";\r\n    let description = \"\";\r\n    if (!globalContext.models || globalContext.models.length === 0) {\r\n        actionName = \"Add Device Model\";\r\n        actionUrl = \"/model/add?new\";\r\n        description = \"You need to add a Device Model before you create a new Simulation.\";\r\n    } else if (!globalContext.apps || globalContext.apps.length === 0) {\r\n        actionName = \"Add Application\";\r\n        actionUrl = \"/app/add?new\";\r\n        description = \"You need to add an IoT Central Application before you create a new Simulation.\";\r\n    }\r\n\r\n    const actions = [\r\n        {\r\n            actionName: actionName,\r\n            actionUrl: actionUrl,\r\n            actionIcon: \"plus\"\r\n        }\r\n    ];\r\n    return simCount > 0 ? <Redirect to={redir} /> :\r\n        <SiteWrapper>\r\n            <Page.Content title=\"\">\r\n                <NoDataFoundCard\r\n                    message=\"Simulations\"\r\n                    description=\"Simulations will show up here. Multiple simulations can be concurrently executed against IoT Central applications.\"\r\n                    description2={description}\r\n                    actions={actions}\r\n                    noDataImage=\"/images/emptySimulations.svg\"\r\n                />\r\n            </Page.Content>\r\n        </SiteWrapper>\r\n        ;\r\n}\r\n\r\nexport default SimLandingPage;","import { useContext, useEffect, useState } from 'react';\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n    Table,\r\n    Text,\r\n} from \"tabler-react\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport HelpPopup from \"../../components/help/HelpPopup\";\r\nimport \"./SimCard.css\";\r\nimport * as Utils from '../../utils/utils';\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst SimCard = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const [sim, setSim] = useState(props.data);\r\n    const [errors, setErrors] = useState({});\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const history = useHistory();\r\n    const queryParams = new URLSearchParams(useLocation().search);\r\n    const fromIntro = (queryParams.has(\"intro\"));\r\n\r\n    useEffect(() => {\r\n        setSim(props.data);\r\n        setErrors({});\r\n        setBackendError(\"\");\r\n    }, [props.data]);\r\n\r\n    useEffect(() => {\r\n        //console.log(\"useEffect sim updated\");\r\n\r\n        if (sim && sim.id && sim.status !== \"ready\") {\r\n            //console.log(\"useEffect sim refreshed\");\r\n            let timer = setInterval(() => {\r\n                globalContext.listSimulations();\r\n                const remoteSim = globalContext.getSimulation(sim.id);\r\n                setSim(remoteSim);\r\n            }, 5000);\r\n            return () => {\r\n                clearInterval(timer);\r\n            }\r\n        }\r\n\r\n        // ignore global context dependency error\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [sim]);\r\n\r\n    const changeHandler = (event) => {\r\n        let updatedSim = {\r\n            ...sim,\r\n            [event.target.name]: event.target.value\r\n        }\r\n        setSim(updatedSim);\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \", updatedSim: \", updatedSim);\r\n    }\r\n\r\n    const changeNumberHandler = (event) => {\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \" valid: \", event.target.validity.valid);\r\n        if (event.target.value.match(/^[0-9]+$/) || event.target.value.trim().length === 0) {\r\n            let val = 0;\r\n            if (event.target.value.trim().length > 0) {\r\n                val = +event.target.value;\r\n            }\r\n            let updatedSim = {\r\n                ...sim,\r\n                [event.target.name]: val\r\n            }\r\n            setSim(updatedSim);\r\n        }\r\n    }\r\n\r\n    const deviceChangeHandler = (event, index) => {\r\n        if (event.target.value.match(/^[0-9]+$/) || event.target.value.trim().length === 0) {\r\n            let val = 0;\r\n            if (event.target.value.trim().length > 0) {\r\n                val = +event.target.value;\r\n            }\r\n            let updatedSim = {\r\n                ...sim,\r\n            }\r\n            updatedSim.devices[index].simulatedCount = val;\r\n            setSim(updatedSim);\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        let newErrors = {};\r\n        let hasErrors = false;\r\n        if (sim.name.trim() === \"\") {\r\n            newErrors.name = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.targetId.trim() === \"\") {\r\n            newErrors.targetId = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.waveGroupCount <= 0) {\r\n            newErrors.waveGroupCount = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.waveGroupInterval <= 0) {\r\n            newErrors.waveGroupInterval = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.telemetryBatchSize <= 0) {\r\n            newErrors.telemetryBatchSize = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.telemetryInterval <= 0) {\r\n            newErrors.telemetryInterval = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.reportedPropertyInterval <= 0) {\r\n            newErrors.reportedPropertyInterval = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.disconnectBehavior.trim() === \"\") {\r\n            newErrors.disconnectBehavior = true;\r\n            hasErrors = true;\r\n        }\r\n        if (sim.telemetryFormat.trim() === \"\") {\r\n            newErrors.telemetryFormat = true;\r\n            hasErrors = true;\r\n        }\r\n        for (let i = 0; i < sim.devices.length; i++) {\r\n            if (sim.devices[i].simulatedCount < 0) {\r\n                const fieldName = `devices[${i}].simulatedCount`;\r\n                newErrors[fieldName] = true;\r\n                hasErrors = true;\r\n            }\r\n        }\r\n\r\n        setErrors(newErrors);\r\n\r\n        if (!hasErrors) {\r\n            //console.log(\"Form submitted mode: \", props.mode, \" sim: \", sim);\r\n            try {\r\n                const updatedSim = {\r\n                    ...sim\r\n                };\r\n                // convert strings to numbers\r\n                updatedSim.telemetryInterval = +updatedSim.telemetryInterval;\r\n                updatedSim.telemetryBatchSize = +updatedSim.telemetryBatchSize;\r\n                updatedSim.reportedPropertyInterval = +updatedSim.reportedPropertyInterval;\r\n                updatedSim.waveGroupCount = +updatedSim.waveGroupCount;\r\n                updatedSim.waveGroupInterval = +updatedSim.waveGroupInterval;\r\n                for (let i = 0; i < updatedSim.devices.length; i++) {\r\n                    updatedSim.devices[i].simulatedCount = +updatedSim.devices[i].simulatedCount;\r\n                }\r\n\r\n                let simId = sim.id;\r\n                if (props.mode === \"add\") {\r\n                    const addedSim = await globalContext.addSimulation(updatedSim);\r\n                    simId = addedSim.id;\r\n                    Notification.addNotification(\"success\", \"Success\", `Simulation '${updatedSim.name}' is added.`);\r\n                } else {\r\n                    await globalContext.updateSimulation(updatedSim);\r\n                    Notification.addNotification(\"success\", \"Success\", `Simulation '${updatedSim.name}' is updated.`);\r\n                }\r\n\r\n                if (fromIntro) {\r\n                    history.push(\"/\");\r\n                } else {\r\n                    history.push(`/sim/${simId}`);\r\n                }\r\n            } catch (ex) {\r\n                setBackendError(Utils.getErrorMessage(ex, \"error saving simulation\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    const startHandler = async (event) => {\r\n        event.preventDefault();\r\n        await globalContext.startSimulation(sim.id);\r\n        Notification.addNotification(\"success\", \"Success\", `Simulation '${sim.name}' started.`);\r\n    };\r\n\r\n    const stopHandler = async (event) => {\r\n        event.preventDefault();\r\n        await globalContext.stopSimulation(sim.id);\r\n        Notification.addNotification(\"success\", \"Success\", `Simulation '${sim.name}' stopped.`);\r\n    };\r\n\r\n    const exportHandler = async (event) => {\r\n        event.preventDefault();\r\n        await globalContext.exportSimulation(sim.id);\r\n    };\r\n\r\n    const deleteHandler = async (event) => {\r\n        event.preventDefault();\r\n        //console.log(\"Delete Simulation\", sim.id);\r\n\r\n        try {\r\n            Notification.addNotification(\"info\", \"Started\", `Deleting simulation '${sim.name}'.`);\r\n            await globalContext.deleteSimulation(sim.id);\r\n            history.push(`/sim/${sim.id}`);\r\n        } catch (ex) {\r\n            setBackendError(Utils.getErrorMessage(ex, \"error deleting simulation\"));\r\n        }\r\n    };\r\n\r\n    const title = props.mode ? (props.mode === \"add\") ? \"Add new simulation\" : \"Edit simulation - \" + props.data.name : \"\";\r\n    //console.log(\"SimCard - mode: \", props.mode, \" backendError: \", props.backendError, \" data: \", props.data);\r\n\r\n    const appsArr = globalContext.apps ? Array.from(globalContext.apps) : [];\r\n    const appsList = appsArr.map((app) => {\r\n        return (\r\n            <option key={app.id} value={app.id}>{app.name}</option>\r\n        );\r\n    });\r\n\r\n    const deviceRows = sim && sim.devices.map((device, index) => {\r\n        //const fieldName = device.id + \"SimulatedCount\";\r\n        const fieldName = `devices[${index}]`;\r\n        //console.log(\"setting device: \", device, \" fieldName:\", fieldName);\r\n        let statusBadge = \"\";\r\n        if (device.simulatedCount === device.connectedCount) {\r\n            const msg = \"All \" + Utils.formatNumber(device.connectedCount) + \" devices are connected\";\r\n            statusBadge = <span className=\"status-icon bg-success\" title={msg} />;\r\n        } else {\r\n            const msg = Utils.formatNumber(device.simulatedCount - device.connectedCount) + \" devices are not connected.\";\r\n            statusBadge = <span className=\"status-icon bg-danger\" title={msg} />;\r\n\r\n        }\r\n        if (sim.status !== \"running\") {\r\n            statusBadge = <span className=\"status-icon bg-gray\" title=\"No devices are connected.\" />;\r\n        }\r\n        const simBusy = (sim.status !== \"ready\");\r\n        const model = globalContext.getModel(device.modelId);\r\n        const modelName = (model) ? model.name : props.model;\r\n\r\n        return <Table.Row key={device.id}>\r\n            <Table.Col>\r\n                <Link to={`/model/${device.modelId}`}> {modelName} </Link>\r\n            </Table.Col>\r\n            <Table.Col>{Utils.formatNumber(device.provisionedCount)}</Table.Col>\r\n            <Table.Col>\r\n                <Form.Input\r\n                    name={`${fieldName}.simulatedCount`}\r\n                    value={sim.devices[index].simulatedCount}\r\n                    required\r\n                    type=\"text\"\r\n                    pattern=\"[0-9]*\"\r\n                    onChange={(event) => { deviceChangeHandler(event, index) }}\r\n                    disabled={simBusy}\r\n                    invalid={errors.devices && errors.devices[index].simulatedCount ? true : false}\r\n                    feedback=\"Simulated devices is required\"\r\n                />\r\n            </Table.Col>\r\n            <Table.Col>{statusBadge} {Utils.formatNumber(device.connectedCount)}</Table.Col>\r\n            <Table.Col>{ }</Table.Col>\r\n        </Table.Row>;\r\n    });\r\n\r\n    const simBusy = (sim.status !== \"ready\");\r\n\r\n    const totalSimulatedDevices = sim.devices.reduce((currentNumber, device) => {\r\n        return currentNumber + device.simulatedCount;\r\n    }, 0);\r\n    const totalConnectedDevices = sim.devices.reduce((currentNumber, device) => {\r\n        return currentNumber + device.connectedCount;\r\n    }, 0);\r\n    let simStatusName = \"Ready\";\r\n    let statusColor = \"green\";\r\n    if (sim.status === \"ready\") {\r\n        statusColor = \"secondary\";\r\n        simStatusName = \"Ready\";\r\n    } else if (sim.status === \"provisioning\") {\r\n        statusColor = \"primary\";\r\n        simStatusName = \"Devices Provisioning\";\r\n    } else if (sim.status === \"running\") {\r\n        simStatusName = \"Running\";\r\n        if (totalSimulatedDevices !== totalConnectedDevices) {\r\n            statusColor = \"danger\";\r\n        }\r\n    } else if (sim.status === \"deleting\") {\r\n        simStatusName = \"Deleting\";\r\n        statusColor = \"danger\";\r\n    }\r\n    const textStatusColor = \"text-\" + statusColor;\r\n    return <>\r\n        <div>{props.backendError}</div>\r\n        <form onSubmit={onSubmit}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Options>\r\n                        <span title=\"Save this simulation\">\r\n                            <Button color=\"primary\" size=\"sm\" icon=\"save\" disabled={simBusy} className=\"ml-2\" type=\"submit\">Save</Button>\r\n                        </span>\r\n                    </Card.Options>\r\n                </Card.Header>\r\n                {\r\n                    props.mode !== \"add\" &&\r\n                    <Card.Header className=\"simToolBar\">\r\n                        {\r\n                            sim.status === \"ready\" &&\r\n                            <span title=\"Start this simulation\">\r\n                                <Button color=\"primary\" size=\"sm\" icon=\"play\" type=\"button\" onClick={startHandler}>Start</Button></span>\r\n                        }\r\n                        {\r\n                            sim.status === \"running\" &&\r\n                            <span title=\"Stop this simulation\">\r\n                                <Button color=\"primary\" size=\"sm\" icon=\"square\" type=\"button\" onClick={stopHandler}>Stop</Button></span>\r\n                        }\r\n                        <span title=\"Provision devices for this simulation\">\r\n                            <Button color=\"primary\" size=\"sm\" outline icon=\"grid\" disabled={simBusy} type=\"button\" className=\"ml-2\" onClick={() => history.push(`/sim/${sim.id}?provision`)}>Provision</Button></span>\r\n                        <span title=\"Export this simulation as a shell script\">\r\n                            <Button color=\"primary\" size=\"sm\" outline icon=\"share\" disabled={props.mode === \"add\"} type=\"button\" className=\"ml-2\" onClick={exportHandler}>Export</Button></span>\r\n                        <span title=\"Delete this simulation\">\r\n                            <Button color=\"danger\" size=\"sm\" outline icon=\"trash-2\" disabled={simBusy} className=\"ml-2\" type=\"button\" onClick={deleteHandler}>Delete</Button></span>\r\n                        <div className=\"card-options mr-2\">\r\n                            <div className=\"text-dark\">Status:{\" \"}</div>\r\n                            <div className={textStatusColor}>{simStatusName}</div>\r\n                        </div>\r\n                    </Card.Header>\r\n                }\r\n                <Card.Body>\r\n                    {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                        <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                        {backendError}\r\n                    </div>}\r\n                    <p>\r\n                        Configure a simulation using the parameters below.\r\n                        Simulations cannot be updated when they are running.\r\n                        Devices are automatically provisioned when a simulation is started and these devices are reused in future executions of this simulation.\r\n                        However, you can explicitly provision or de-provision ahead of time.\r\n                    </p>\r\n                    <Grid.Row>\r\n                        <Grid.Col>\r\n                            {simBusy && <Text className=\"text-default small\"><Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"} Simulation cannot be updated when it is busy.</Text>}\r\n                        </Grid.Col>\r\n                        <Grid.Col>\r\n                            <div className=\"simLearnMore\">\r\n                                <a href=\"https://github.com/iot-for-all/starling/docs/configure.md#configure-simulation\" target=\"_blank\" rel=\"noreferrer\">Help me configure this simulation</a>\r\n                            </div>\r\n                        </Grid.Col>\r\n                    </Grid.Row>\r\n                    <Form.FieldSet>\r\n                        <Grid.Row>\r\n                            <Grid.Col>\r\n                                <h4>Base Configuration</h4>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Simulation Name\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Input\r\n                                                name=\"name\"\r\n                                                value={sim.name}\r\n                                                required\r\n                                                onChange={changeHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.name ? true : false}\r\n                                                feedback=\"Simulation Name is required\"\r\n                                            />\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<>Name of the Simulation that is shown everywhere.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Target Application\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Select\r\n                                                name=\"targetId\"\r\n                                                value={sim.targetId}\r\n                                                required\r\n                                                onChange={changeHandler}\r\n                                                disabled={props.mode !== \"add\"}\r\n                                                invalid={errors.targetId ? true : false}\r\n                                                feedback=\"Target Application is required\"\r\n                                            >\r\n                                                <option value=\"\">\r\n                                                    Select one\r\n                                        </option>\r\n                                                {appsList}\r\n                                            </Form.Select>\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<>The IoT Central application in which the simulated devices are created.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Device Disconnect Behavior\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Select\r\n                                                name=\"disconnectBehavior\"\r\n                                                value={sim.disconnectBehavior}\r\n                                                required\r\n                                                onChange={changeHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.disconnectBehavior ? true : false}\r\n                                                feedback=\"Device Disconnect Behavior is required\"\r\n                                            >\r\n                                                <option value=\"never\">\r\n                                                    Never Disconnect\r\n                                        </option>\r\n                                                <option value=\"telemetry\">\r\n                                                    After Sending Telemetry\r\n                                        </option>\r\n                                            </Form.Select>\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<><p>Select <strong>Never Disconnect</strong> if you want your devices to be connected always. Use this for a typical IoT device.</p>\r\n                                                Select <strong>After Sending Telemetry</strong> if you want your devices to be disconnected after sending each telemetry batch. Use this for simulating occasionally connected devices.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Telemetry Format\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Select\r\n                                                name=\"telemetryFormat\"\r\n                                                value={sim.telemetryFormat}\r\n                                                required\r\n                                                onChange={changeHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.telemetryFormat ? true : false}\r\n                                                feedback=\"Telemetry Format is required\"\r\n                                            >\r\n                                                <option value=\"default\">Default (JSON)</option>\r\n                                                <option value=\"opcua\">OPCUA (JSON)</option>\r\n                                            </Form.Select>\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<><p>Select <strong>Default</strong> for a typical IoT device.</p>\r\n                                                Select <strong>OPCUA</strong> for sending data in OPCUA format. This is used for Industrial IoT (IIoT) devices.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                            </Grid.Col>\r\n                            <Grid.Col>\r\n                                <h4>Data Rates</h4>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Telemetry Interval (secs)\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Input\r\n                                                name=\"telemetryInterval\"\r\n                                                value={sim.telemetryInterval}\r\n                                                required\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={changeNumberHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.telemetryInterval ? true : false}\r\n                                                feedback=\"Telemetry Interval (whole number) is required\"\r\n                                            />\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<>Enter how often telemetry is sent from the device to IoT Central.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Telemetry Batch Size\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Input\r\n                                                name=\"telemetryBatchSize\"\r\n                                                value={sim.telemetryBatchSize}\r\n                                                required\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={changeNumberHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.telemetryBatchSize ? true : false}\r\n                                                feedback=\"Telemetry Batch Size (whole number) is required\"\r\n                                            />\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<>Number of telemetry messages to be sent everytime 'Telemetry Batch Size' seconds.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Reported Property Interval (secs)\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Input\r\n                                                name=\"reportedPropertyInterval\"\r\n                                                value={sim.reportedPropertyInterval}\r\n                                                required\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={changeNumberHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.reportedPropertyInterval ? true : false}\r\n                                                feedback=\"Reported Property Interval (whole number) is required\"\r\n                                            />\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<>Enter how often reported properties are sent from the device to IoT Central.</>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Wave Group Count\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Input\r\n                                                name=\"waveGroupCount\"\r\n                                                value={sim.waveGroupCount}\r\n                                                required\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={changeNumberHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.waveGroupCount ? true : false}\r\n                                                feedback=\"Wave Group Count (whole number) is required\"\r\n                                            />\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<><p>Devices can be divided into several number of waves. Telemetry is sent sequentially from devices in one wave after another.</p>\r\n                                                <p>For a simple simulation, set it to <strong>1</strong>.</p>\r\n                                                Say, if you want to divide your fleet of devices into 2 waves, 30 seconds apart, set <strong>Wave Group Count</strong> as <strong>2</strong> and <strong>Wave Group Interval</strong> as <strong>30</strong>.\r\n                                            </>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                                <Form.Group\r\n                                    isRequired\r\n                                    label=\"Wave Group Interval (secs)\"\r\n                                >\r\n                                    <Grid.Row gutters=\"xs\">\r\n                                        <Grid.Col>\r\n                                            <Form.Input\r\n                                                name=\"waveGroupInterval\"\r\n                                                value={sim.waveGroupInterval}\r\n                                                required\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={changeNumberHandler}\r\n                                                disabled={simBusy}\r\n                                                invalid={errors.waveGroupInterval ? true : false}\r\n                                                feedback=\"Wave Group Interval (whole number) is required\"\r\n                                            />\r\n                                        </Grid.Col>\r\n                                        <Grid.Col\r\n                                            auto\r\n                                            className=\"align-self-center\"\r\n                                        >\r\n                                            <HelpPopup content={<><p>Interval between each wave group.</p>\r\n                                                <p>If the <strong>Wave Group Count</strong> is set as <strong>1</strong>, you can leave <strong>Wave Group Interval</strong> as <strong>1</strong>.</p>\r\n                                                Say, if you want to divide your fleet of devices into 2 waves, 30 seconds apart, set <strong>Wave Group Count</strong> as <strong>2</strong> and <strong>Wave Group Interval</strong> as <strong>30</strong>.\r\n                                            </>} />\r\n                                        </Grid.Col>\r\n                                    </Grid.Row>\r\n                                </Form.Group>\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Col colSpan=\"2\">\r\n                                <h4>Simulated Devices</h4>\r\n                                <Text className=\"small\">Devices are automatically provisioned in IoT Central when the simulation is started.\r\n                                These devices are reused whenever this simulation is executed.\r\n                                You can add/delete provisioned devices using the Provision button above.\r\n                                All provisioned devices will be deleted when simulation is deleted.\r\n                                    <p></p>\r\n                                    <Text className=\"text-default\"><strong><Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"} Provisioned devices in IoT Central will be billed to your Azure subscription.</strong></Text>\r\n                                </Text>\r\n\r\n                                <Table\r\n                                    cards={true}\r\n                                    striped={true}\r\n                                    responsive={true}\r\n                                    className=\"table-vcenter fillerTable\"\r\n                                >\r\n                                    <Table.Header>\r\n                                        <Table.Row>\r\n                                            <Table.ColHeader>\r\n                                                <Grid.Row gutters=\"xs\">\r\n                                                    <Grid.Col>\r\n                                                        Model\r\n                                                    </Grid.Col>\r\n                                                    <Grid.Col\r\n                                                        auto\r\n                                                        className=\"align-self-center\"\r\n                                                    >\r\n                                                        <HelpPopup content={<>Devices of this type are simulated.</>} placement=\"bottom\" />\r\n                                                    </Grid.Col>\r\n                                                </Grid.Row>\r\n                                            </Table.ColHeader>\r\n                                            <Table.ColHeader>\r\n                                                <Grid.Row gutters=\"xs\">\r\n                                                    <Grid.Col>\r\n                                                        Provisioned\r\n                                                    </Grid.Col>\r\n                                                    <Grid.Col\r\n                                                        auto\r\n                                                        className=\"align-self-center\"\r\n                                                    >\r\n                                                        <HelpPopup content={<>Number of devices currently provisioned for this simulation.</>} placement=\"bottom\" />\r\n                                                    </Grid.Col>\r\n                                                </Grid.Row>\r\n                                            </Table.ColHeader>\r\n                                            <Table.ColHeader>\r\n                                                <Grid.Row gutters=\"xs\">\r\n                                                    <Grid.Col>\r\n                                                        Simulated\r\n                                                    </Grid.Col>\r\n                                                    <Grid.Col\r\n                                                        auto\r\n                                                        className=\"align-self-center\"\r\n                                                    >\r\n                                                        <HelpPopup content={<>Number of devices requested to be simulated.</>} placement=\"bottom\" />\r\n                                                    </Grid.Col>\r\n                                                </Grid.Row>\r\n                                            </Table.ColHeader>\r\n                                            <Table.ColHeader>\r\n                                                <Grid.Row gutters=\"xs\">\r\n                                                    <Grid.Col>\r\n                                                        Connected\r\n                                                    </Grid.Col>\r\n                                                    <Grid.Col\r\n                                                        auto\r\n                                                        className=\"align-self-center\"\r\n                                                    >\r\n                                                        <HelpPopup content={<>Number of devices currently connected for this simulation.</>} placement=\"bottom\" />\r\n                                                    </Grid.Col>\r\n                                                </Grid.Row>\r\n                                            </Table.ColHeader>\r\n                                            <Table.ColHeader></Table.ColHeader>\r\n                                        </Table.Row>\r\n                                    </Table.Header>\r\n                                    <Table.Body>\r\n                                        {deviceRows}\r\n                                    </Table.Body>\r\n                                </Table>\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.FieldSet>\r\n                </Card.Body>\r\n            </Card>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default SimCard;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n    Table,\r\n    Text,\r\n} from \"tabler-react\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport * as Utils from '../../utils/utils';\r\nimport HelpPopup from \"../../components/help/HelpPopup\";\r\nimport \"./SimCard.css\";\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst ProvisionCard = (props) => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const [sim, setSim] = useState(props.data);\r\n    const [errors, setErrors] = useState({});\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        setSim(props.data);\r\n        setErrors({});\r\n        setBackendError(\"\");\r\n    }, [props.data]);\r\n\r\n    const deviceChangeHandler = (event, index) => {\r\n        let updatedSim = {\r\n            ...sim,\r\n        }\r\n        updatedSim.devices[index].provisionedCount = event.target.value;\r\n        setSim(updatedSim);\r\n        //console.log(\"value changed target: \", event.target, \" index: \", index, \" value: \", event.target.value, \", updatedSim: \", updatedSim);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        let newErrors = {};\r\n        let hasErrors = false;\r\n        setErrors(newErrors);\r\n\r\n        if (!hasErrors) {\r\n            //console.log(\"Form submitted mode: \", props.mode, \" sim: \", sim);\r\n            try {\r\n                const updatedSim = {\r\n                    ...sim\r\n                };\r\n                // convert strings to numbers\r\n                for (let i = 0; i < updatedSim.devices.length; i++) {\r\n                    updatedSim.devices[i].provisionedCount = +updatedSim.devices[i].provisionedCount;\r\n                }\r\n\r\n                await globalContext.provisionSimulationDevices(updatedSim.id, updatedSim.devices);\r\n                Notification.addNotification(\"info\", \"Started\", `Provisioning devices for simulation '${updatedSim.name}'.`);\r\n\r\n                history.push(`/sim/${sim.id}`);\r\n            } catch (ex) {\r\n                setBackendError(Utils.getErrorMessage(ex, \"error provisioning devices\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    const title = \"Provision devices - \" + sim.name;\r\n    const deviceRows = sim && sim.devices.map((device, index) => {\r\n        //const fieldName = device.id + \"SimulatedCount\";\r\n        const fieldName = `devices[${index}]`;\r\n        //console.log(\"setting device: \", device, \" fieldName:\", fieldName);\r\n\r\n        return <Table.Row key={device.id}>\r\n            <Table.Col>\r\n                {device.modelId}\r\n            </Table.Col>\r\n            <Table.Col>\r\n                <Form.Input\r\n                    name={`${fieldName}.provisionedCount`}\r\n                    value={sim.devices[index].provisionedCount}\r\n                    required\r\n                    type=\"number\"\r\n                    onChange={(event) => { deviceChangeHandler(event, index) }}\r\n                    invalid={errors.devices && errors.devices[index].provisionedCount ? true : false}\r\n                    feedback=\"Provisioned devices is required\"\r\n                />\r\n            </Table.Col>\r\n            <Table.Col>{ }</Table.Col>\r\n        </Table.Row>;\r\n    });\r\n\r\n    return <>\r\n        <div>{props.backendError}</div>\r\n        <form onSubmit={onSubmit} method=\"post\">\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Options>\r\n                        <span title=\"Provision devices for this simulation\">\r\n                            <Button color=\"primary\" size=\"sm\" icon=\"grid\" className=\"ml-2\" type=\"submit\">Provision</Button>\r\n                        </span>\r\n                        <span title=\"Cancel all changes\">\r\n                            <Button color=\"primary\" size=\"sm\" className=\"ml-2\" outline type=\"button\"\r\n                                onClick={() => history.push(\"/sim/\"+sim.id)} >Cancel</Button>\r\n                        </span>\r\n                    </Card.Options>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                        <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                        {backendError}\r\n                    </div>}\r\n                    <p>\r\n                        Provision devices for this simulation. Devices can either be added or removed by increasing\r\n                        or decreasing the numbers below.\r\n                    </p>\r\n                    <Form.FieldSet>\r\n                        <Grid.Row>\r\n                            <Grid.Col colSpan=\"2\">\r\n                                <h4>Provision Devices Count</h4>\r\n                                <Text className=\"small\">Devices are provisioned in IoT Central for the given model below.\r\n                                All provisioned devices will be deleted when simulation is deleted.\r\n                                    <p></p>\r\n                                    <Text className=\"text-default\"><strong><Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"} Provisioned devices in IoT Central will be billed to your Azure subscription.</strong></Text>\r\n                                </Text>\r\n\r\n                                <Table\r\n                                    cards={true}\r\n                                    striped={true}\r\n                                    responsive={true}\r\n                                    className=\"table-vcenter fillerTable\"\r\n                                >\r\n                                    <Table.Header>\r\n                                        <Table.Row>\r\n                                            <Table.ColHeader>\r\n                                                <Grid.Row gutters=\"xs\">\r\n                                                    <Grid.Col>\r\n                                                        Model\r\n                                                    </Grid.Col>\r\n                                                    <Grid.Col\r\n                                                        auto\r\n                                                        className=\"align-self-center\"\r\n                                                    >\r\n                                                        <HelpPopup content={<>Devices of this type are simulated.</>} placement=\"bottom\" />\r\n                                                    </Grid.Col>\r\n                                                </Grid.Row>\r\n                                            </Table.ColHeader>\r\n                                            <Table.ColHeader>\r\n                                                <Grid.Row gutters=\"xs\">\r\n                                                    <Grid.Col>\r\n                                                        Device Count\r\n                                                    </Grid.Col>\r\n                                                    <Grid.Col\r\n                                                        auto\r\n                                                        className=\"align-self-center\"\r\n                                                    >\r\n                                                        <HelpPopup content={<>Number of devices to be provisioned for this simulation.</>} placement=\"bottom\" />\r\n                                                    </Grid.Col>\r\n                                                </Grid.Row>\r\n                                            </Table.ColHeader>\r\n                                            <Table.ColHeader></Table.ColHeader>\r\n                                        </Table.Row>\r\n                                    </Table.Header>\r\n                                    <Table.Body>\r\n                                        {deviceRows}\r\n                                    </Table.Body>\r\n                                </Table>\r\n                            </Grid.Col>\r\n                        </Grid.Row>\r\n                    </Form.FieldSet>\r\n                </Card.Body>\r\n            </Card>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default ProvisionCard;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Icon,\r\n    List,\r\n    Page\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Link, Redirect, useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport Toolbar from '../../components/toolbar/Toolbar';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport ListDetails from '../../components/listdetails/ListDetails';\r\nimport SimCard from './SimCard';\r\nimport ProvisionCard from './ProvisionCard';\r\nimport * as Utils from \"../../utils/utils\";\r\n\r\nconst SimPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n\r\n    const params = useParams();\r\n    const queryParams = new URLSearchParams(useLocation().search);\r\n    const [sim, setSim] = useState();\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const id = params.id;\r\n    const history = useHistory();\r\n    const pageMode = (queryParams.has(\"new\")) ? \"add\" : \"edit\";\r\n    const isProvisionMode = (queryParams.has(\"provision\"));\r\n\r\n    // Called on mount to ensure reference data is loaded if coming from shortcut\r\n    \r\n    // Only called if a new mount or id has changed\r\n    useEffect(() => {\r\n        if (pageMode === 'add') {\r\n            let devices = [];\r\n            for (let i = 0; i < globalContext.models.length; i++) {\r\n                devices.push({ id: globalContext.models[i].id, modelId: globalContext.models[i].id, provisionedCount: 0, simulatedCount: 0, connectedCount: 0 });\r\n            }\r\n\r\n            setSim({\r\n                id: \"\",\r\n                name: \"\",\r\n                targetId: \"\",\r\n                status: \"ready\",\r\n                waveGroupCount: 1,\r\n                waveGroupInterval: 1,\r\n                telemetryBatchSize: 1,\r\n                telemetryInterval: 120,\r\n                reportedPropertyInterval: 14400,\r\n                disconnectBehavior: \"never\",\r\n                telemetryFormat: \"default\",\r\n                devices: devices\r\n            });\r\n        } else {\r\n            if (!id) {\r\n                setSim(globalContext.simulations[0]);\r\n            } else {\r\n                const remoteSim = globalContext.getSimulation(id);\r\n                if (!remoteSim) {\r\n                    // simId passed in url is invalid or does not exist\r\n                    history.replace(\"/sim\");\r\n                }\r\n\r\n                setSim({ ...remoteSim });\r\n            }\r\n        }\r\n        setBackendError(\"\");\r\n\r\n        // ignore global context dependency error\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [globalContext.simulations, globalContext.initialized, id])\r\n\r\n    const simCount = Utils.formatCount(globalContext.simulations, \"simulation\");\r\n\r\n    // simId passed in url is invalid or does not exist\r\n    if (!globalContext.models || globalContext.models.length === 0\r\n        || !globalContext.apps || globalContext.apps.length === 0\r\n    ) {\r\n        return <Redirect to={'/sim'} />\r\n    }\r\n\r\n    const simsList = sim ? globalContext.simulations.map((element) => {\r\n        return (\r\n            <List.GroupItem\r\n                className=\"d-flex align-items-center\"\r\n                to={\"/sim/\" + element.id}\r\n                RootComponent={Link}\r\n                key={element.id}\r\n                active={element.id === sim?.id}\r\n                action\r\n            >\r\n                {element.name}\r\n            </List.GroupItem>\r\n        );\r\n    }) : \"\";\r\n\r\n    const simCard = sim ? <SimCard\r\n        data={sim}\r\n        mode={pageMode}\r\n        backendError={backendError}\r\n    /> : \"\";\r\n\r\n    const provisionCard = sim ? <ProvisionCard\r\n        data={sim}\r\n        backendError={backendError}\r\n    /> : \"\";\r\n\r\n    return (\r\n        <SiteWrapper>\r\n            <Page.Content title=\"Simulations\">\r\n                <Toolbar\r\n                    countMessage={simCount}\r\n                >\r\n                    <span title=\"Add a Simulation\">\r\n                        <Link\r\n                            to=\"/sim/add?new\"\r\n                            className=\"btn btn-sm btn-primary\"\r\n                        >\r\n                            <Icon prefix=\"fe\" name=\"plus\" />\r\n                            Add New\r\n                        </Link>\r\n                    </span>\r\n                </Toolbar>\r\n                <ListDetails\r\n                    listTitle={\"Simulations\"}\r\n                    list={simsList}\r\n                    detailsTitle={\"Edit Application\"}\r\n                    detailsForm={isProvisionMode ? provisionCard : simCard}\r\n                    backendError={backendError}\r\n                />\r\n            </Page.Content>\r\n        </SiteWrapper>\r\n    );\r\n}\r\n\r\nexport default SimPage;","import { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n    Page,\r\n    Text,\r\n} from \"tabler-react\";\r\n\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport HelpPopup from \"../../components/help/HelpPopup\";\r\nimport * as Utils from '../../utils/utils';\r\nimport \"./SettingsPage.css\";\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst SettingsPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const history = useHistory();\r\n    const [config, setConfig] = useState();\r\n    const [errors, setErrors] = useState({});\r\n    const [backendError, setBackendError] = useState(\"\");\r\n    const [simWarning, setSimWarning] = useState(false);\r\n    const [appWarning, setAppWarning] = useState(false);\r\n    const [saved, setSaved] = useState(false);\r\n\r\n    // Called on mount to ensure reference data is loaded if coming from shortcut\r\n    useEffect(() => {\r\n        if (globalContext.config) {\r\n            // deep copy the config object so that the original config containing geopoint array\r\n            // does not get changed as we are converting it into string locally\r\n            let localConfig = {\r\n                ...globalContext.config,\r\n            };\r\n            localConfig.data = {\r\n                ...globalContext.config.data\r\n            };\r\n            localConfig.http = {\r\n                ...globalContext.config.http\r\n            };\r\n            localConfig.logger = {\r\n                ...globalContext.config.logger\r\n            };\r\n            localConfig.simulation = {\r\n                ...globalContext.config.simulation\r\n            };\r\n            if (localConfig.simulation.geopointData) {\r\n                // default JSON Stringify is spewing too many lines, so we are building a simple JSON strings (one line per geopoint) below\r\n                //localConfig.Simulation.geopointData = JSON.stringify(localConfig.Simulation.geopointData, null, 2);\r\n                let str = \"[\\n\";\r\n                for (let i = 0; i < localConfig.simulation.geopointData.length; i++) {\r\n                    str += \"  [\" + localConfig.simulation.geopointData[i][0] + \", \" + localConfig.simulation.geopointData[i][1] + \", \" + localConfig.simulation.geopointData[i][2] + \"]\";\r\n                    if (i < localConfig.simulation.geopointData.length - 1) {\r\n                        str += \",\\n\";\r\n                    } else {\r\n                        str += \"\\n\";\r\n                    }\r\n                }\r\n                str += \"]\";\r\n                localConfig.simulation.geopointData = str;\r\n            }\r\n\r\n            setConfig(localConfig);\r\n            setBackendError(\"\");\r\n        } else {\r\n            setBackendError(\"Failed to get settings. Make sure that the Starling server is running.\");\r\n        }\r\n        // ignore global context dependency error\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [globalContext.config])\r\n\r\n    // need to change this\r\n    const changeSimHandler = (event) => {\r\n        let updatedSim = {\r\n            ...config.simulation,\r\n            [event.target.name]: event.target.value\r\n        };\r\n        let updatedConfig = {\r\n            ...config,\r\n            simulation: updatedSim,\r\n        };\r\n        setConfig(updatedConfig);\r\n        setSimWarning(true);\r\n        setSaved(false);\r\n    }\r\n\r\n    const changeSimCheckHandler = (event) => {\r\n        let updatedSim = {\r\n            ...config.simulation,\r\n            [event.target.name]: event.target.checked\r\n        };\r\n        let updatedConfig = {\r\n            ...config,\r\n            simulation: updatedSim,\r\n        };\r\n        setConfig(updatedConfig);\r\n        setSimWarning(true);\r\n        setSaved(false);\r\n    }\r\n\r\n    // need to change this\r\n    const changeDataHandler = (event) => {\r\n        let updatedData = {\r\n            ...config.data,\r\n            [event.target.name]: event.target.value\r\n        };\r\n        let updatedConfig = {\r\n            ...config,\r\n            data: updatedData,\r\n        };\r\n        setConfig(updatedConfig);\r\n        setAppWarning(true);\r\n        setSaved(false);\r\n    }\r\n\r\n    // need to change this\r\n    const changeLogHandler = (event) => {\r\n        let updatedLog = {\r\n            ...config.logger,\r\n            [event.target.name]: event.target.value\r\n        };\r\n        let updatedConfig = {\r\n            ...config,\r\n            logger: updatedLog,\r\n        };\r\n        setConfig(updatedConfig);\r\n        setAppWarning(true);\r\n        setSaved(false);\r\n    }\r\n    \r\n    // need to change this\r\n    const changeSimulationNumberHandler = (event) => {\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \" valid: \", event.target.validity.valid);\r\n        if (event.target.value.match(/^[0-9]+$/) || event.target.value.trim().length === 0) {\r\n            let val = 0;\r\n            if (event.target.value.trim().length > 0) {\r\n                val = +event.target.value;\r\n            }\r\n            let updatedSim = {\r\n                ...config.simulation,\r\n                [event.target.name]: val\r\n            };\r\n            let updatedConfig = {\r\n                ...config,\r\n                simulation: updatedSim,\r\n            };\r\n            setConfig(updatedConfig);\r\n            setSimWarning(true);\r\n            setSaved(false);\r\n        }\r\n    }\r\n\r\n    // need to change this\r\n    const changeHttpNumberHandler = (event) => {\r\n        //console.log(\"value changed target: \", event.target, \" value: \", event.target.value, \" valid: \", event.target.validity.valid);\r\n        if (event.target.value.match(/^[0-9]+$/) || event.target.value.trim().length === 0) {\r\n            let val = 0;\r\n            if (event.target.value.trim().length > 0) {\r\n                val = +event.target.value;\r\n            }\r\n            let updatedHttp = {\r\n                ...config.http,\r\n                [event.target.name]: val\r\n            };\r\n            let updatedConfig = {\r\n                ...config,\r\n                http: updatedHttp,\r\n            };\r\n            setConfig(updatedConfig);\r\n            setAppWarning(true);\r\n            setSaved(false);\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        let newErrors = {};\r\n        let hasErrors = false;\r\n        if (config.simulation.connectionTimeout <= 0) {\r\n            newErrors.connectionTimeout = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.telemetryTimeout <= 0) {\r\n            newErrors.telemetryTimeout = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.twinUpdateTimeout <= 0) {\r\n            newErrors.twinUpdateTimeout = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.commandTimeout <= 0) {\r\n            newErrors.commandTimeout = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.registrationAttemptTimeout <= 0) {\r\n            newErrors.registrationAttemptTimeout = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.maxConcurrentConnections <= 0) {\r\n            newErrors.maxConcurrentConnections = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.maxConcurrentTwinUpdates <= 0) {\r\n            newErrors.maxConcurrentTwinUpdates = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.maxConcurrentRegistrations <= 0) {\r\n            newErrors.maxConcurrentRegistrations = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.maxConcurrentDeletes <= 0) {\r\n            newErrors.maxConcurrentDeletes = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.maxRegistrationAttempts <= 0) {\r\n            newErrors.maxRegistrationAttempts = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.simulation.geopointData.trim() === \"\") {\r\n            newErrors.geopointData = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.http.adminPort <= 0) {\r\n            newErrors.adminPort = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.http.metricsPort <= 0) {\r\n            newErrors.maxConcurrentRegistrations = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.logger.logsDir.trim().length === 0) {\r\n            newErrors.logsDir = true;\r\n            hasErrors = true;\r\n        }\r\n        if (config.data.path.trim().length === 0) {\r\n            newErrors.logsDir = true;\r\n            hasErrors = true;\r\n        }\r\n\r\n        setErrors(newErrors);\r\n\r\n        if (!hasErrors) {\r\n            //console.log(\"Form submitted mode: \", props.mode, \" sim: \", sim);\r\n            try {\r\n                const updatedConfig = {\r\n                    ...config\r\n                };\r\n\r\n                let foundError = false;\r\n                try {\r\n                    updatedConfig.simulation.geopointData = JSON.parse(updatedConfig.simulation.geopointData);\r\n                } catch (ex2) {\r\n                    setBackendError(\"Error parsing Geopoint Data: \" + Utils.getErrorMessage(ex2, \"error parsing JSON\"));\r\n                    foundError = true;\r\n                }\r\n\r\n                if (!foundError) {\r\n                    await globalContext.updateConfig(updatedConfig);\r\n                    let msg = \"Configuration is updated.\";\r\n                    if (simWarning) {\r\n                        msg += \" Restart simulations.\"\r\n                    }\r\n                    if (appWarning) {\r\n                        msg += \" Restart Starling server.\"\r\n                    }\r\n                    Notification.addNotification(\"success\", \"Success\", msg);\r\n\r\n                    setSaved(true);\r\n                    history.replace(`/settings`);\r\n                }\r\n            } catch (ex) {\r\n                setBackendError(Utils.getErrorMessage(ex, \"error saving configuration\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    return <SiteWrapper>\r\n        <Page.Content title=\"Settings\">\r\n            {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                {backendError}\r\n            </div>}\r\n            {simWarning && saved &&\r\n                <div className=\"alert alert-warning\">\r\n                    <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                    Some of the simulation level settings are changed. Restart simulations to apply changes.\r\n                </div>\r\n            }\r\n            {appWarning && saved &&\r\n                <div className=\"alert alert-warning\">\r\n                    <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                    Some of the application level settings are changed. Restart Starling server to apply changes.\r\n                </div>\r\n            }\r\n            {\r\n                config &&\r\n                <form onSubmit={onSubmit}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title>Starling Configuration</Card.Title>\r\n                            <Card.Options>\r\n                                <span title=\"Save this configuration\">\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        size=\"sm\"\r\n                                        icon=\"save\"\r\n                                        className=\"ml-2\"\r\n                                        onClick={onSubmit}\r\n                                    >Save</Button>\r\n                                </span>\r\n                            </Card.Options>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <p>Configure Starling server using the following settings.</p>\r\n                            <Form.FieldSet>\r\n                                <Grid.Row>\r\n                                    <Grid.Col>\r\n                                        <h6>\r\n                                            <Text className=\"text-default small\"><strong><Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"} Restart simulations to apply these changes.</strong></Text>\r\n                                        </h6>\r\n                                        <h4>Simulation Settings</h4>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Connection Timeout (ms)\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"connectionTimeout\"\r\n                                                        value={config.simulation.connectionTimeout}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.connectionTimeout ? true : false}\r\n                                                        feedback=\"Connection Timeout (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Timeout in milliseconds for device connection.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Telemetry Timeout (ms)\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"telemetryTimeout\"\r\n                                                        value={config.simulation.telemetryTimeout}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.telemetryTimeout ? true : false}\r\n                                                        feedback=\"Telemetry Timeout (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Timeout in milliseconds for sending telemetry.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Twin Update Timeout (ms)\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"twinUpdateTimeout\"\r\n                                                        value={config.simulation.twinUpdateTimeout}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.twinUpdateTimeout ? true : false}\r\n                                                        feedback=\"Twin Update Timeout (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Timeout in milliseconds for updating device twin.\r\n                                                This is used for acknowledging desired property changes or sending reported properties.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Command Timeout (ms)\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"commandTimeout\"\r\n                                                        value={config.simulation.commandTimeout}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.commandTimeout ? true : false}\r\n                                                        feedback=\"Command Timeout (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Timeout in milliseconds for acknowledging commands.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Provisioning Timeout (ms)\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"registrationAttemptTimeout\"\r\n                                                        value={config.simulation.registrationAttemptTimeout}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.registrationAttemptTimeout ? true : false}\r\n                                                        feedback=\"Registration Timeout (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Timeout in milliseconds for provisioning a device in Device Provisioning Service (DPS).</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Max. Concurrent Telemetry\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"maxConcurrentConnections\"\r\n                                                        value={config.simulation.maxConcurrentConnections}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.maxConcurrentConnections ? true : false}\r\n                                                        feedback=\"Max. Concurrent Telemetry (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Maximum number of devices to send telemetry at a time.\r\n                                                You can simulate large number of devices (say 1,000) at any time, but concurrently this many (say 100) devices will send telemetry at the same instant.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Max. Concurrent Twin Updates\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"maxConcurrentConnections\"\r\n                                                        value={config.simulation.maxConcurrentTwinUpdates}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.maxConcurrentTwinUpdates ? true : false}\r\n                                                        feedback=\"Max. Concurrent Twin Updates (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Maximum number of devices to send reported properties at a time.\r\n                                                You can simulate large number of devices (say 1,000) at any time, but concurrently this many (say 100) devices will send reported properties at the same instant.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Max. Concurrent Device Registrations\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"maxConcurrentRegistrations\"\r\n                                                        value={config.simulation.maxConcurrentRegistrations}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.maxConcurrentRegistrations ? true : false}\r\n                                                        feedback=\"Max. Concurrent Device Registrations (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Maximum number of devices to be provisioned at a time.\r\n                                                    Keep this number low as Device Provisioning Service (DPS) will throttle.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Max. Concurrent Device Deletes\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"maxConcurrentDeletes\"\r\n                                                        value={config.simulation.maxConcurrentDeletes}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.maxConcurrentDeletes ? true : false}\r\n                                                        feedback=\"Max. Concurrent Device Deletes (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Maximum number of devices to be deleted at a time.\r\n                                                    Devices are deleted when the simulation is deleted or the provisioned count in a simulation is decreased.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Max. Registration Attempts\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"maxRegistrationAttempts\"\r\n                                                        value={config.simulation.maxRegistrationAttempts}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeSimulationNumberHandler}\r\n                                                        invalid={errors.maxRegistrationAttempts ? true : false}\r\n                                                        feedback=\"Max. Registration Attempts (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>Maximum number of times a device can attempt for registration before erroring out.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Checkbox\r\n                                                        name=\"enableTelemetry\"\r\n                                                        label=\"Send Telemetry\"\r\n                                                        checked={config.simulation.enableTelemetry}\r\n                                                        onChange={changeSimCheckHandler}\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>Should telemetry be sent from the device?</p>\r\n                                                If this setting is turned off, no devices will send any telemetry.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Checkbox\r\n                                                        name=\"enableReportedProps\"\r\n                                                        label=\"Send Reported Properties\"\r\n                                                        checked={config.simulation.enableReportedProps}\r\n                                                        onChange={changeSimCheckHandler}\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>Should reported properties be sent from the device?</p>\r\n                                                If this setting is turned off, no devices will send any reported properties.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Checkbox\r\n                                                        name=\"enableTwinUpdateAcks\"\r\n                                                        label=\"Send Desired Property Acknowledgements\"\r\n                                                        checked={config.simulation.enableTwinUpdateAcks}\r\n                                                        onChange={changeSimCheckHandler}\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>When the device receives a desired property update, should reported properties be sent from the device?</p>\r\n                                                If this setting is turned off, no devices will send any reported property acknowledgements for desired property updates.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Checkbox\r\n                                                        name=\"enableCommandAcks\"\r\n                                                        label=\"Send Command Acknowedgements\"\r\n                                                        checked={config.simulation.enableCommandAcks}\r\n                                                        onChange={changeSimCheckHandler}\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>Should commands be acknowledgements be sent from the device?</p>\r\n                                                If this setting is turned off, no devices will send any acknowledgements for Direct methods or C2D commands.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                    </Grid.Col>\r\n                                    <Grid.Col>\r\n                                        <h6>\r\n                                            <Text className=\"text-default small\"><strong><Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"} Restart Starling to apply these changes.</strong></Text>\r\n                                        </h6>\r\n                                        <h4>HTTP Settings</h4>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Administration Server Port Number\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"adminPort\"\r\n                                                        value={config.http.adminPort}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeHttpNumberHandler}\r\n                                                        invalid={errors.adminPort ? true : false}\r\n                                                        feedback=\"Administration Server Port Number (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>The port on which the Starling administration server is listening.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Metrics Port Number\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"metricsPort\"\r\n                                                        value={config.http.metricsPort}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeHttpNumberHandler}\r\n                                                        invalid={errors.metricsPort ? true : false}\r\n                                                        feedback=\"Metrics Port Number (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>The port on which the Starling publishes Prometheus metrics.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Prometheus Port Number\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"prometheusPort\"\r\n                                                        value={config.http.prometheusPort}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeHttpNumberHandler}\r\n                                                        invalid={errors.prometheusPort ? true : false}\r\n                                                        feedback=\"Prometheus Port Number (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>The port on which the Promethus server is listening.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Grafana Port Number\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"grafanaPort\"\r\n                                                        value={config.http.grafanaPort}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeHttpNumberHandler}\r\n                                                        invalid={errors.grafanaPort ? true : false}\r\n                                                        feedback=\"Grafana Port Number (whole number) is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<>The port on which the Grafana dashboard server is listening.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n\r\n                                        <h4>Data Settings</h4>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Database Directory\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"path\"\r\n                                                        value={config.data.path}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeDataHandler}\r\n                                                        invalid={errors.adminPort ? true : false}\r\n                                                        feedback=\"Database Directory is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>The directory in which Starling stores its database.</p>\r\n                                                        <p>By default it stores data in a <strong>[Starling binary directory]/.db</strong> directory.</p>\r\n                                                Use forward / instead of \\ in paths. E.g.: d:/starling/data\r\n                                                </>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n\r\n                                        <h4>Logger Settings</h4>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Logs Directory\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Input\r\n                                                        name=\"logsDir\"\r\n                                                        value={config.logger.logsDir}\r\n                                                        required\r\n                                                        type=\"text\"\r\n                                                        pattern=\"[0-9]*\"\r\n                                                        onChange={changeLogHandler}\r\n                                                        invalid={errors.adminPort ? true : false}\r\n                                                        feedback=\"Logs Directory is required\"\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>The directory in which Starling stores log files.</p>\r\n                                                        <p>Log files are automatically rotated every <strong>30 days</strong> or when it reaches <strong>10MB</strong>. Last <strong>3</strong> files are kept.</p>\r\n                                                        <p>By default it stores data in a <strong>[Starling binary directory]/logs</strong> directory.</p>\r\n                                                Use forward / instead of \\ in paths. E.g.: d:/starling/logs.\r\n                                                </>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Log Level\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Select\r\n                                                        name=\"logLevel\"\r\n                                                        value={config.logger.logLevel}\r\n                                                        required\r\n                                                        onChange={changeLogHandler}\r\n                                                        invalid={errors.logLevel ? true : false}\r\n                                                        feedback=\"Log Level is required\"\r\n                                                    >\r\n                                                        <option value=\"panic\">Panic</option>\r\n                                                        <option value=\"fatal\">Fatal</option>\r\n                                                        <option value=\"error\">Error</option>\r\n                                                        <option value=\"warn\">Warning</option>\r\n                                                        <option value=\"info\">Information</option>\r\n                                                        <option value=\"debug\">Debug</option>\r\n                                                        <option value=\"trace\">Trace</option>\r\n                                                    </Form.Select>\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>Starling produces runtime logs stored in its <strong>Log Directory</strong>. Select the appropriate log level.</p>\r\n                                                Leave this at <strong>Debug</strong> level as it produces useful information.</>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n\r\n                                        <h4>Data Generation</h4>\r\n                                        <Form.Group\r\n                                            isRequired\r\n                                            label=\"Geopoint Data\"\r\n                                        >\r\n                                            <Grid.Row gutters=\"xs\">\r\n                                                <Grid.Col>\r\n                                                    <Form.Textarea\r\n                                                        name=\"geopointData\"\r\n                                                        value={config.simulation.geopointData}\r\n                                                        required\r\n                                                        onChange={changeSimHandler}\r\n                                                        className=\"geopointData\"\r\n                                                        invalid={errors.geopointData ? true : false}\r\n                                                        feedback=\"Geopoint Data is required\"\r\n                                                        rows={15}\r\n                                                    />\r\n                                                </Grid.Col>\r\n                                                <Grid.Col\r\n                                                    auto\r\n                                                    className=\"align-self-center\"\r\n                                                >\r\n                                                    <HelpPopup content={<><p>These Geopoints data is used during simulating geopoint data types. All the points are sequentially used while sending telemetry messages containing geopoints. </p>\r\n                                                        <p>Format is a JSON array with three floating point numbers: <strong>[latitude, longitude, altitude]</strong>.</p>\r\n                                                        Default data is for a road around part of Microsoft campus in Redmond, WA, USA.\r\n                                                </>} />\r\n                                                </Grid.Col>\r\n                                            </Grid.Row>\r\n                                        </Form.Group>\r\n                                    </Grid.Col>\r\n                                </Grid.Row>\r\n                            </Form.FieldSet>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </form>\r\n            }\r\n        </Page.Content>\r\n    </SiteWrapper>;\r\n}\r\n\r\nexport default SettingsPage;","import { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Header,\r\n    Icon,\r\n    Page,\r\n    Text\r\n} from \"tabler-react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport GlobalContext from '../../context/globalContext';\r\nimport SiteWrapper from '../../components/site/SiteWrapper';\r\nimport * as Utils from '../../utils/utils';\r\nimport \"./MetricsPage.css\"\r\nimport * as Notification from \"../../components/notification/Notification\";\r\n\r\nconst MetricsPage = () => {\r\n    const globalContext = useContext(GlobalContext)\r\n    const history = useHistory();\r\n    const [status, setStatus] = useState({ grafanaStatus: false, prometheusStatus: false });\r\n    const [backendError, setBackendError] = useState(\"\");\r\n\r\n    // Called on mount to ensure reference data is loaded if coming from shortcut\r\n    useEffect(() => {\r\n        if (globalContext.metricsStatus) {\r\n            setStatus(globalContext.metricsStatus);\r\n            setBackendError(\"\");\r\n        }\r\n    }, [globalContext.metricsStatus])\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // validate form\r\n        //console.log(\"Form submitted mode: \", props.mode, \" sim: \", sim);\r\n        try {\r\n            const stats = await globalContext.refreshMetricsStatus();\r\n            Notification.addNotification(\"success\", \"Success\", `Metrics status refreshed.`);\r\n            setStatus(stats)\r\n            history.replace(`/metrics`);\r\n        } catch (ex) {\r\n            setBackendError(Utils.getErrorMessage(ex, \"error refreshing metrics\"));\r\n        }\r\n    }\r\n\r\n    const starlingStatus = <span className={backendError.length === 0 ? \"text-green\" : \"text-danger\"}>\r\n        {backendError.length === 0 ? \"Healthy\" : \"Not running\"}\r\n    </span>;\r\n    const prometheusStatus = <span className={status.prometheusServer ? \"text-green\" : \"text-danger\"}>\r\n        {status.prometheusServer ? \"Healthy\" : \"Not running\"}\r\n    </span>;\r\n    const grafanaStatus = <span className={status.grafanaServer ? \"text-green\" : \"text-danger\"}>\r\n        {status.grafanaServer ? \"Healthy\" : \"Not running\"}\r\n    </span>;\r\n\r\n    let prometheusLink = \"\";\r\n    let grafanaLink = \"\";\r\n\r\n    const metricsUrl = (globalContext.config) ? \"http://localhost:\" + globalContext.config.http.metricsPort + \"/metrics\" : \"#\";\r\n    const starlingMetricsLink = <div>\r\n        <Icon prefix=\"fe\" name=\"external-link\" />{\" \"}<a href={metricsUrl} target=\"_blank\" rel=\"noreferrer\">Raw Metrics</a>\r\n    </div>;\r\n\r\n    if (status.prometheusServer) {\r\n        let url = \"#\";\r\n        if (globalContext.config) {\r\n            url = \"http://localhost:\" + globalContext.config.http.prometheusPort;\r\n        }\r\n        prometheusLink = <div>\r\n            <Icon prefix=\"fe\" name=\"external-link\" />{\" \"}<a href={url} target=\"_blank\" rel=\"noreferrer\">Dashboard</a>\r\n        </div>;\r\n    } else {\r\n        prometheusLink = <div>\r\n            <Icon prefix=\"fe\" name=\"external-link\" />{\" \"}<a href=\"https://github.com/iot-for-all/starling/docs/metrics.md#prometheus\" target=\"_blank\" rel=\"noreferrer\">Help me configure</a>\r\n        </div>;\r\n    }\r\n\r\n    if (status.grafanaServer) {\r\n        let url = \"#\";\r\n        if (globalContext.config) {\r\n            url = \"http://localhost:\" + globalContext.config.http.grafanaPort;\r\n        }\r\n        grafanaLink = <div>\r\n            <Icon prefix=\"fe\" name=\"external-link\" />{\" \"}<a href={url} target=\"_blank\" rel=\"noreferrer\">Dashboard</a>\r\n        </div>;\r\n    } else {\r\n        grafanaLink = <div>\r\n            <Icon prefix=\"fe\" name=\"external-link\" />{\" \"}<a href=\"https://github.com/iot-for-all/starling/docs/metrics.md#grafana\" target=\"_blank\" rel=\"noreferrer\">Help me configure</a>\r\n        </div>;\r\n    }\r\n\r\n    return <SiteWrapper>\r\n        <Page.Content title=\"Metrics\">\r\n            {backendError && backendError.length > 0 && <div className=\"alert alert-danger\">\r\n                <Icon prefix=\"fe\" name=\"alert-triangle\" />{\" \"}\r\n                {backendError}\r\n            </div>}\r\n            <form onSubmit={onSubmit}>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Title>Data Flow</Card.Title>\r\n                        <Card.Options>\r\n                            <span title=\"Refresh Metrics Status\">\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    size=\"sm\"\r\n                                    icon=\"refresh-ccw\"\r\n                                    className=\"ml-2\"\r\n                                    onClick={onSubmit}\r\n                                >Refresh</Button>\r\n                            </span>\r\n                        </Card.Options>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <div className=\"simLearnMore\">\r\n                            <Text className=\"text-default\"><Icon prefix=\"fe\" name=\"help-circle\" />{\" \"} <a href=\"https://github.com/iot-for-all/starling\" target=\"_blank\" rel=\"noreferrer\">Help me configure metrics pipeline</a></Text>\r\n                        </div>\r\n                        <p>\r\n                        </p>\r\n                        <p>\r\n                            Starling publishes metrics through its metrics endpoint.\r\n                            You can configure Prometheus to scrape these metrics and store in its timeseries database.\r\n                            Grafana can be configured to show dashboards based on the data stored in Prometheus.\r\n                        </p>\r\n                        <div className=\"serverCardContainer\">\r\n                            <div className=\"serverCardItem\">\r\n                                <Card className=\"serverCard\">\r\n                                    <Card.Body className=\"text-center\">\r\n                                        <Header size={2}>Starling</Header>\r\n                                        <Header size={5}>Status: {starlingStatus}</Header>\r\n                                        {starlingMetricsLink}\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"serverCardArrow\">\r\n                                <div>\r\n                                    <Text className=\"arrowText\">Prometheus scrapes data from Starling</Text>\r\n                                </div>\r\n                                <span className=\"arrow-right\"></span>\r\n                            </div>\r\n                            <div className=\"serverCardItem\">\r\n                                <Card className=\"serverCard\">\r\n                                    <Card.Body className=\"text-center\">\r\n                                        <img className=\"card-img-top\" src=\"./images/prometheusLogo.png\" alt=\"Prometheus\" />\r\n                                        <Header size={5}>Status: {prometheusStatus}</Header>\r\n                                        {prometheusLink}\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"serverCardArrow\">\r\n                                <div>\r\n                                    <Text className=\"arrowText\">Grafana queries data from Prometheus</Text>\r\n                                </div>\r\n                                <span className=\"arrow-right\"></span>\r\n                            </div>\r\n                            <div className=\"serverCardItem\">\r\n                                <Card className=\"serverCard\">\r\n                                    <Card.Body className=\"text-center\">\r\n                                        <img className=\"card-img-top\" src=\"./images/grafanaLogo.jpg\" alt=\"Grafana\" />\r\n                                        <Header size={5}>Status: {grafanaStatus}</Header>\r\n                                        {grafanaLink}\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n            </form>\r\n        </Page.Content>\r\n    </SiteWrapper>;\r\n}\r\n\r\nexport default MetricsPage;","import * as React from \"react\";\r\n\r\nimport { Error404Page } from \"tabler-react\";\r\n\r\nconst CustomError404Page = (props) => {\r\n  return <Error404Page />;\r\n}\r\n\r\nexport default CustomError404Page;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { GlobalContextProvider } from './context/globalContext';\nimport './App.css';\n\nimport HomePage from './pages/HomePage';\nimport AppLandingPage from './pages/app/AppLandingPage';\nimport AppPage from './pages/app/AppPage';\nimport ModelLandingPage from './pages/model/ModelLandingPage';\nimport ModelPage from './pages/model/ModelPage';\nimport SimLandingPage from './pages/sim/SimLandingPage';\nimport SimPage from './pages/sim/SimPage';\nimport SettingsPage from './pages/settings/SettingsPage';\nimport MetricsPage from './pages/metrics/MetricsPage';\nimport Error404Page from './pages/error/Error404Page';\nimport \"tabler-react/dist/Tabler.css\";\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <Router>\n        <GlobalContextProvider>\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/app\" component={AppLandingPage} />\n            <Route exact path=\"/app/:id\" component={AppPage} />\n            <Route exact path=\"/model\" component={ModelLandingPage} />\n            <Route exact path=\"/model/:id\" component={ModelPage} />\n            <Route exact path=\"/sim\" component={SimLandingPage} />\n            <Route exact path=\"/sim/:id\" component={SimPage} />\n            <Route exact path=\"/settings\" component={SettingsPage} />\n            <Route exact path=\"/metrics\" component={MetricsPage} />\n            <Route component={Error404Page} />\n          </Switch>\n        </GlobalContextProvider>\n      </Router>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReactNotification />\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}